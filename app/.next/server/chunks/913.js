"use strict";exports.id=913,exports.ids=[913],exports.modules={1913:(e,r,t)=>{t.r(r),t.d(r,{fromProcess:()=>j});var i=t(2037),s=t(1017);let n={},o=()=>process&&process.geteuid?`${process.geteuid()}`:"DEFAULT",l=()=>{let{HOME:e,USERPROFILE:r,HOMEPATH:t,HOMEDRIVE:l=`C:${s.sep}`}=process.env;if(e)return e;if(r)return r;if(t)return`${l}${t}`;let c=o();return n[c]||(n[c]=(0,i.homedir)()),n[c]},c=e=>e.profile||process.env.AWS_PROFILE||"default";t(6113);var a=t(7147);let{readFile:d}=a.promises;var f=t(5315);let u=e=>Object.entries(e).filter(([e])=>{let r=e.indexOf(x);return -1!==r&&Object.values(f.I).includes(e.substring(0,r))}).reduce((e,[r,t])=>{let i=r.indexOf(x);return e[r.substring(0,i)===f.I.PROFILE?r.substring(i+1):r]=t,e},{...e.default&&{default:e.default}}),p=()=>process.env.AWS_CONFIG_FILE||(0,s.join)(l(),".aws","config"),h=()=>process.env.AWS_SHARED_CREDENTIALS_FILE||(0,s.join)(l(),".aws","credentials"),w=/^([\w-]+)\s(["'])?([\w-@\+\.%:/]+)\2$/,g=["__proto__","profile __proto__"],_=e=>{let r,t;let i={};for(let s of e.split(/\r?\n/)){let e=s.split(/(^|\s)[;#]/)[0].trim();if("["===e[0]&&"]"===e[e.length-1]){r=void 0,t=void 0;let i=e.substring(1,e.length-1),s=w.exec(i);if(s){let[,e,,t]=s;Object.values(f.I).includes(e)&&(r=[e,t].join(x))}else r=i;if(g.includes(i))throw Error(`Found invalid profile name "${i}"`)}else if(r){let n=e.indexOf("=");if(![0,-1].includes(n)){let[o,l]=[e.substring(0,n).trim(),e.substring(n+1).trim()];if(""===l)t=o;else{t&&s.trimStart()===s&&(t=void 0),i[r]=i[r]||{};let e=t?[t,o].join(x):o;i[r][e]=l}}}}return i},{readFile:v}=a.promises,E={},m=(e,r)=>((!E[e]||r?.ignoreCache)&&(E[e]=v(e,"utf8")),E[e]),S=()=>({}),x=".",I=async(e={})=>{let{filepath:r=h(),configFilepath:t=p()}=e,i=l(),n=r;r.startsWith("~/")&&(n=(0,s.join)(i,r.slice(2)));let o=t;t.startsWith("~/")&&(o=(0,s.join)(i,t.slice(2)));let c=await Promise.all([m(o,{ignoreCache:e.ignoreCache}).then(_).then(u).catch(S),m(n,{ignoreCache:e.ignoreCache}).then(_).catch(S)]);return{configFile:c[0],credentialsFile:c[1]}},O=(...e)=>{let r={};for(let t of e)for(let[e,i]of Object.entries(t))void 0!==r[e]?Object.assign(r[e],i):r[e]=i;return r},b=async e=>{let r=await I(e);return O(r.configFile,r.credentialsFile)};var y=t(9776),A=t(2081),P=t(3837),C=t(1315);let F=(e,r,t)=>{if(1!==r.Version)throw Error(`Profile ${e} credential_process did not return Version 1.`);if(void 0===r.AccessKeyId||void 0===r.SecretAccessKey)throw Error(`Profile ${e} credential_process returned invalid credentials.`);if(r.Expiration){let t=new Date;if(new Date(r.Expiration)<t)throw Error(`Profile ${e} credential_process returned expired credentials.`)}let i=r.AccountId;!i&&t?.[e]?.aws_account_id&&(i=t[e].aws_account_id);let s={accessKeyId:r.AccessKeyId,secretAccessKey:r.SecretAccessKey,...r.SessionToken&&{sessionToken:r.SessionToken},...r.Expiration&&{expiration:new Date(r.Expiration)},...r.CredentialScope&&{credentialScope:r.CredentialScope},...i&&{accountId:i}};return(0,C.P)(s,"CREDENTIALS_PROCESS","w"),s},$=async(e,r,t)=>{let i=r[e];if(r[e]){let s=i.credential_process;if(void 0!==s){let i=(0,P.promisify)(A.exec);try{let t;let{stdout:n}=await i(s);try{t=JSON.parse(n.trim())}catch{throw Error(`Profile ${e} credential_process returned invalid JSON.`)}return F(e,t,r)}catch(e){throw new y.mV(e.message,{logger:t})}}else throw new y.mV(`Profile ${e} did not contain credential_process.`,{logger:t})}else throw new y.mV(`Profile ${e} could not be found in shared credentials file.`,{logger:t})},j=(e={})=>async()=>{e.logger?.debug("@aws-sdk/credential-provider-process - fromProcess");let r=await b(e);return $(c(e),r,e.logger)}}};
"use strict";exports.id=347,exports.ids=[347],exports.modules={6347:(e,t,r)=>{r.d(t,{fromIni:()=>K});var n=r(2037),i=r(1017);let s={},o=()=>process&&process.geteuid?`${process.geteuid()}`:"DEFAULT",l=()=>{let{HOME:e,USERPROFILE:t,HOMEPATH:r,HOMEDRIVE:l=`C:${i.sep}`}=process.env;if(e)return e;if(t)return t;if(r)return`${l}${r}`;let a=o();return s[a]||(s[a]=(0,n.homedir)()),s[a]},a=e=>e.profile||process.env.AWS_PROFILE||"default";r(6113);var c=r(7147);let{readFile:d}=c.promises;var f=r(5315);let u=e=>Object.entries(e).filter(([e])=>{let t=e.indexOf(m);return -1!==t&&Object.values(f.I).includes(e.substring(0,t))}).reduce((e,[t,r])=>{let n=t.indexOf(m);return e[t.substring(0,n)===f.I.PROFILE?t.substring(n+1):t]=r,e},{...e.default&&{default:e.default}}),_=()=>process.env.AWS_CONFIG_FILE||(0,i.join)(l(),".aws","config"),g=()=>process.env.AWS_SHARED_CREDENTIALS_FILE||(0,i.join)(l(),".aws","credentials"),p=/^([\w-]+)\s(["'])?([\w-@\+\.%:/]+)\2$/,y=["__proto__","profile __proto__"],E=e=>{let t,r;let n={};for(let i of e.split(/\r?\n/)){let e=i.split(/(^|\s)[;#]/)[0].trim();if("["===e[0]&&"]"===e[e.length-1]){t=void 0,r=void 0;let n=e.substring(1,e.length-1),i=p.exec(n);if(i){let[,e,,r]=i;Object.values(f.I).includes(e)&&(t=[e,r].join(m))}else t=n;if(y.includes(n))throw Error(`Found invalid profile name "${n}"`)}else if(t){let s=e.indexOf("=");if(![0,-1].includes(s)){let[o,l]=[e.substring(0,s).trim(),e.substring(s+1).trim()];if(""===l)r=o;else{r&&i.trimStart()===i&&(r=void 0),n[t]=n[t]||{};let e=r?[r,o].join(m):o;n[t][e]=l}}}}return n},{readFile:w}=c.promises,h={},b=(e,t)=>((!h[e]||t?.ignoreCache)&&(h[e]=w(e,"utf8")),h[e]),I=()=>({}),m=".",v=async(e={})=>{let{filepath:t=g(),configFilepath:r=_()}=e,n=l(),s=t;t.startsWith("~/")&&(s=(0,i.join)(n,t.slice(2)));let o=r;r.startsWith("~/")&&(o=(0,i.join)(n,r.slice(2)));let a=await Promise.all([b(o,{ignoreCache:e.ignoreCache}).then(E).then(u).catch(I),b(s,{ignoreCache:e.ignoreCache}).then(E).catch(I)]);return{configFile:a[0],credentialsFile:a[1]}},C=(...e)=>{let t={};for(let r of e)for(let[e,n]of Object.entries(r))void 0!==t[e]?Object.assign(t[e],n):t[e]=n;return t},O=async e=>{let t=await v(e);return C(t.configFile,t.credentialsFile)};var S=r(9776),P=r(1315);let R=(e,t,n)=>{let i={EcsContainer:async e=>{let{fromHttp:t}=await r.e(367).then(r.bind(r,7367)),{fromContainerMetadata:i}=await r.e(492).then(r.bind(r,1492));return n?.debug("@aws-sdk/credential-provider-ini - credential_source is EcsContainer"),async()=>(0,S.tS)(t(e??{}),i(e))().then(A)},Ec2InstanceMetadata:async e=>{n?.debug("@aws-sdk/credential-provider-ini - credential_source is Ec2InstanceMetadata");let{fromInstanceMetadata:t}=await r.e(492).then(r.bind(r,1492));return async()=>t(e)().then(A)},Environment:async e=>{n?.debug("@aws-sdk/credential-provider-ini - credential_source is Environment");let{fromEnv:t}=await Promise.resolve().then(r.bind(r,29));return async()=>t(e)().then(A)}};if(e in i)return i[e];throw new S.mV(`Unsupported credential source in profile ${t}. Got ${e}, expected EcsContainer or Ec2InstanceMetadata or Environment.`,{logger:n})},A=e=>(0,P.P)(e,"CREDENTIALS_PROFILE_NAMED_PROVIDER","p"),L=(e,{profile:t="default",logger:r}={})=>!!e&&"object"==typeof e&&"string"==typeof e.role_arn&&["undefined","string"].indexOf(typeof e.role_session_name)>-1&&["undefined","string"].indexOf(typeof e.external_id)>-1&&["undefined","string"].indexOf(typeof e.mfa_serial)>-1&&(F(e,{profile:t,logger:r})||k(e,{profile:t,logger:r})),F=(e,{profile:t,logger:r})=>{let n="string"==typeof e.source_profile&&void 0===e.credential_source;return n&&r?.debug?.(`    ${t} isAssumeRoleWithSourceProfile source_profile=${e.source_profile}`),n},k=(e,{profile:t,logger:r})=>{let n="string"==typeof e.credential_source&&void 0===e.source_profile;return n&&r?.debug?.(`    ${t} isCredentialSourceProfile credential_source=${e.credential_source}`),n},j=async(e,t,n,i={})=>{n.logger?.debug("@aws-sdk/credential-provider-ini - resolveAssumeRoleCredentials (STS)");let s=t[e];if(!n.roleAssumer){let{getDefaultRoleAssumer:e}=await r.e(160).then(r.bind(r,8160));n.roleAssumer=e({...n.clientConfig,credentialProviderLogger:n.logger,parentClientConfig:n?.parentClientConfig},n.clientPlugins)}let{source_profile:o}=s;if(o&&o in i)throw new S.mV(`Detected a cycle attempting to resolve credentials for profile ${a(n)}. Profiles visited: `+Object.keys(i).join(", "),{logger:n.logger});n.logger?.debug(`@aws-sdk/credential-provider-ini - finding credential resolver using ${o?`source_profile=[${o}]`:`profile=[${e}]`}`);let l=o?G(o,t,n,{...i,[o]:!0},$(t[o]??{})):(await R(s.credential_source,e,n.logger)(n))();if($(s))return l.then(e=>(0,P.P)(e,"CREDENTIALS_PROFILE_SOURCE_PROFILE","o"));{let t={RoleArn:s.role_arn,RoleSessionName:s.role_session_name||`aws-sdk-js-${Date.now()}`,ExternalId:s.external_id,DurationSeconds:parseInt(s.duration_seconds||"3600",10)},{mfa_serial:r}=s;if(r){if(!n.mfaCodeProvider)throw new S.mV(`Profile ${e} requires multi-factor authentication, but no MFA code callback was provided.`,{logger:n.logger,tryNextLink:!1});t.SerialNumber=r,t.TokenCode=await n.mfaCodeProvider(r)}let i=await l;return n.roleAssumer(i,t).then(e=>(0,P.P)(e,"CREDENTIALS_PROFILE_SOURCE_PROFILE","o"))}},$=e=>!e.role_arn&&!!e.credential_source,x=e=>!!e&&"object"==typeof e&&"string"==typeof e.credential_process,D=async(e,t)=>r.e(913).then(r.bind(r,1913)).then(({fromProcess:r})=>r({...e,profile:t})().then(e=>(0,P.P)(e,"CREDENTIALS_PROFILE_PROCESS","v"))),N=async(e,t,n={})=>{let{fromSSO:i}=await r.e(564).then(r.bind(r,1564));return i({profile:e,logger:n.logger})().then(e=>t.sso_session?(0,P.P)(e,"CREDENTIALS_PROFILE_SSO","r"):(0,P.P)(e,"CREDENTIALS_PROFILE_SSO_LEGACY","t"))},T=e=>e&&("string"==typeof e.sso_start_url||"string"==typeof e.sso_account_id||"string"==typeof e.sso_session||"string"==typeof e.sso_region||"string"==typeof e.sso_role_name),W=e=>!!e&&"object"==typeof e&&"string"==typeof e.aws_access_key_id&&"string"==typeof e.aws_secret_access_key&&["undefined","string"].indexOf(typeof e.aws_session_token)>-1&&["undefined","string"].indexOf(typeof e.aws_account_id)>-1,M=async(e,t)=>{t?.logger?.debug("@aws-sdk/credential-provider-ini - resolveStaticCredentials");let r={accessKeyId:e.aws_access_key_id,secretAccessKey:e.aws_secret_access_key,sessionToken:e.aws_session_token,...e.aws_credential_scope&&{credentialScope:e.aws_credential_scope},...e.aws_account_id&&{accountId:e.aws_account_id}};return(0,P.P)(r,"CREDENTIALS_PROFILE","n")},V=e=>!!e&&"object"==typeof e&&"string"==typeof e.web_identity_token_file&&"string"==typeof e.role_arn&&["undefined","string"].indexOf(typeof e.role_session_name)>-1,U=async(e,t)=>r.e(494).then(r.bind(r,7494)).then(({fromTokenFile:r})=>r({webIdentityTokenFile:e.web_identity_token_file,roleArn:e.role_arn,roleSessionName:e.role_session_name,roleAssumerWithWebIdentity:t.roleAssumerWithWebIdentity,logger:t.logger,parentClientConfig:t.parentClientConfig})().then(e=>(0,P.P)(e,"CREDENTIALS_PROFILE_STS_WEB_ID_TOKEN","q"))),G=async(e,t,r,n={},i=!1)=>{let s=t[e];if(Object.keys(n).length>0&&W(s))return M(s,r);if(i||L(s,{profile:e,logger:r.logger}))return j(e,t,r,n);if(W(s))return M(s,r);if(V(s))return U(s,r);if(x(s))return D(r,e);if(T(s))return await N(e,s,r);throw new S.mV(`Could not resolve credentials using profile: [${e}] in configuration/credentials file(s).`,{logger:r.logger})},K=(e={})=>async()=>{e.logger?.debug("@aws-sdk/credential-provider-ini - fromIni");let t=await O(e);return G(a(e),t,e)}}};
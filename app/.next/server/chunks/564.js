"use strict";exports.id=564,exports.ids=[564],exports.modules={1564:(e,t,s)=>{s.d(t,{fromSSO:()=>eS});var r=s(9776),i=s(2037),n=s(1017);let o={},l=()=>process&&process.geteuid?`${process.geteuid()}`:"DEFAULT",a=()=>{let{HOME:e,USERPROFILE:t,HOMEPATH:s,HOMEDRIVE:r=`C:${n.sep}`}=process.env;if(e)return e;if(t)return t;if(s)return`${r}${s}`;let a=l();return o[a]||(o[a]=(0,i.homedir)()),o[a]},c=e=>e.profile||process.env.AWS_PROFILE||"default";var f=s(6113);let u=e=>{let t=(0,f.createHash)("sha1").update(e).digest("hex");return(0,n.join)(a(),".aws","sso","cache",`${t}.json`)};var d=s(7147);let{readFile:g}=d.promises,h=async e=>{let t=u(e);return JSON.parse(await g(t,"utf8"))};var w=s(5315);let p=e=>Object.entries(e).filter(([e])=>{let t=e.indexOf(v);return -1!==t&&Object.values(w.I).includes(e.substring(0,t))}).reduce((e,[t,s])=>{let r=t.indexOf(v);return e[t.substring(0,r)===w.I.PROFILE?t.substring(r+1):t]=s,e},{...e.default&&{default:e.default}}),S=()=>process.env.AWS_CONFIG_FILE||(0,n.join)(a(),".aws","config"),_=()=>process.env.AWS_SHARED_CREDENTIALS_FILE||(0,n.join)(a(),".aws","credentials"),m=/^([\w-]+)\s(["'])?([\w-@\+\.%:/]+)\2$/,O=["__proto__","profile __proto__"],x=e=>{let t,s;let r={};for(let i of e.split(/\r?\n/)){let e=i.split(/(^|\s)[;#]/)[0].trim();if("["===e[0]&&"]"===e[e.length-1]){t=void 0,s=void 0;let r=e.substring(1,e.length-1),i=m.exec(r);if(i){let[,e,,s]=i;Object.values(w.I).includes(e)&&(t=[e,s].join(v))}else t=r;if(O.includes(r))throw Error(`Found invalid profile name "${r}"`)}else if(t){let n=e.indexOf("=");if(![0,-1].includes(n)){let[o,l]=[e.substring(0,n).trim(),e.substring(n+1).trim()];if(""===l)s=o;else{s&&i.trimStart()===i&&(s=void 0),r[t]=r[t]||{};let e=s?[s,o].join(v):o;r[t][e]=l}}}}return r},{readFile:y}=d.promises,I={},b=(e,t)=>((!I[e]||t?.ignoreCache)&&(I[e]=y(e,"utf8")),I[e]),k=()=>({}),v=".",T=async(e={})=>{let{filepath:t=_(),configFilepath:s=S()}=e,r=a(),i=t;t.startsWith("~/")&&(i=(0,n.join)(r,t.slice(2)));let o=s;s.startsWith("~/")&&(o=(0,n.join)(r,s.slice(2)));let l=await Promise.all([b(o,{ignoreCache:e.ignoreCache}).then(x).then(p).catch(k),b(i,{ignoreCache:e.ignoreCache}).then(x).catch(k)]);return{configFile:l[0],credentialsFile:l[1]}},$=e=>Object.entries(e).filter(([e])=>e.startsWith(w.I.SSO_SESSION+v)).reduce((e,[t,s])=>({...e,[t.substring(t.indexOf(v)+1)]:s}),{}),j=()=>({}),C=async(e={})=>b(e.configFilepath??S()).then(x).then($).catch(j),F=(...e)=>{let t={};for(let s of e)for(let[e,r]of Object.entries(s))void 0!==t[e]?Object.assign(t[e],r):t[e]=r;return t},E=async e=>{let t=await T(e);return F(t.configFile,t.credentialsFile)},L=e=>e&&("string"==typeof e.sso_start_url||"string"==typeof e.sso_account_id||"string"==typeof e.sso_session||"string"==typeof e.sso_region||"string"==typeof e.sso_role_name);var N=s(1315);let A={},D=()=>process&&process.geteuid?`${process.geteuid()}`:"DEFAULT",R=()=>{let{HOME:e,USERPROFILE:t,HOMEPATH:s,HOMEDRIVE:r=`C:${n.sep}`}=process.env;if(e)return e;if(t)return t;if(s)return`${r}${s}`;let o=D();return A[o]||(A[o]=(0,i.homedir)()),A[o]},P=e=>e.profile||process.env.AWS_PROFILE||"default",V=e=>{let t=(0,f.createHash)("sha1").update(e).digest("hex");return(0,n.join)(R(),".aws","sso","cache",`${t}.json`)},{readFile:W}=d.promises,G=async e=>{let t=V(e);return JSON.parse(await W(t,"utf8"))},H=e=>Object.entries(e).filter(([e])=>{let t=e.indexOf(X);return -1!==t&&Object.values(w.I).includes(e.substring(0,t))}).reduce((e,[t,s])=>{let r=t.indexOf(X);return e[t.substring(0,r)===w.I.PROFILE?t.substring(r+1):t]=s,e},{...e.default&&{default:e.default}}),U=()=>process.env.AWS_CONFIG_FILE||(0,n.join)(R(),".aws","config"),q=()=>process.env.AWS_SHARED_CREDENTIALS_FILE||(0,n.join)(R(),".aws","credentials"),J=/^([\w-]+)\s(["'])?([\w-@\+\.%:/]+)\2$/,z=["__proto__","profile __proto__"],Y=e=>{let t,s;let r={};for(let i of e.split(/\r?\n/)){let e=i.split(/(^|\s)[;#]/)[0].trim();if("["===e[0]&&"]"===e[e.length-1]){t=void 0,s=void 0;let r=e.substring(1,e.length-1),i=J.exec(r);if(i){let[,e,,s]=i;Object.values(w.I).includes(e)&&(t=[e,s].join(X))}else t=r;if(z.includes(r))throw Error(`Found invalid profile name "${r}"`)}else if(t){let n=e.indexOf("=");if(![0,-1].includes(n)){let[o,l]=[e.substring(0,n).trim(),e.substring(n+1).trim()];if(""===l)s=o;else{s&&i.trimStart()===i&&(s=void 0),r[t]=r[t]||{};let e=s?[s,o].join(X):o;r[t][e]=l}}}}return r},{readFile:B}=d.promises,K={},M=(e,t)=>((!K[e]||t?.ignoreCache)&&(K[e]=B(e,"utf8")),K[e]),Q=()=>({}),X=".",Z=async(e={})=>{let{filepath:t=q(),configFilepath:s=U()}=e,r=R(),i=t;t.startsWith("~/")&&(i=(0,n.join)(r,t.slice(2)));let o=s;s.startsWith("~/")&&(o=(0,n.join)(r,s.slice(2)));let l=await Promise.all([M(o,{ignoreCache:e.ignoreCache}).then(Y).then(H).catch(Q),M(i,{ignoreCache:e.ignoreCache}).then(Y).catch(Q)]);return{configFile:l[0],credentialsFile:l[1]}},ee=e=>Object.entries(e).filter(([e])=>e.startsWith(w.I.SSO_SESSION+X)).reduce((e,[t,s])=>({...e,[t.substring(t.indexOf(X)+1)]:s}),{}),et=()=>({}),es=async(e={})=>M(e.configFilepath??U()).then(Y).then(ee).catch(et),er=(...e)=>{let t={};for(let s of e)for(let[e,r]of Object.entries(s))void 0!==t[e]?Object.assign(t[e],r):t[e]=r;return t},ei=async e=>{let t=await Z(e);return er(t.configFile,t.credentialsFile)},en="To refresh this SSO session run 'aws sso login' with the corresponding profile.",eo={},el=async e=>{let{SSOOIDCClient:t}=await s.e(830).then(s.bind(s,8830));if(eo[e])return eo[e];let r=new t({region:e});return eo[e]=r,r},ea=async(e,t)=>{let{CreateTokenCommand:r}=await s.e(830).then(s.bind(s,8830));return(await el(t)).send(new r({clientId:e.clientId,clientSecret:e.clientSecret,refreshToken:e.refreshToken,grantType:"refresh_token"}))},ec=e=>{if(e.expiration&&e.expiration.getTime()<Date.now())throw new r.rh(`Token is expired. ${en}`,!1)},ef=(e,t,s=!1)=>{if(void 0===t)throw new r.rh(`Value not present for '${e}' in SSO Token${s?". Cannot refresh":""}. ${en}`,!1)},{writeFile:eu}=d.promises,ed=(e,t)=>eu(V(e),JSON.stringify(t,null,2)),eg=new Date(0),eh=(e={})=>async()=>{let t;e.logger?.debug("@aws-sdk/token-providers - fromSso");let s=await ei(e),i=P(e),n=s[i];if(n){if(!n.sso_session)throw new r.rh(`Profile '${i}' is missing required property 'sso_session'.`)}else throw new r.rh(`Profile '${i}' could not be found in shared credentials file.`,!1);let o=n.sso_session,l=(await es(e))[o];if(!l)throw new r.rh(`Sso session '${o}' could not be found in shared credentials file.`,!1);for(let e of["sso_start_url","sso_region"])if(!l[e])throw new r.rh(`Sso session '${o}' is missing required property '${e}'.`,!1);l.sso_start_url;let a=l.sso_region;try{t=await G(o)}catch(e){throw new r.rh(`The SSO session token associated with profile=${i} was not found or is invalid. ${en}`,!1)}ef("accessToken",t.accessToken),ef("expiresAt",t.expiresAt);let{accessToken:c,expiresAt:f}=t,u={token:c,expiration:new Date(f)};if(u.expiration.getTime()-Date.now()>3e5)return u;if(Date.now()-eg.getTime()<3e4)return ec(u),u;ef("clientId",t.clientId,!0),ef("clientSecret",t.clientSecret,!0),ef("refreshToken",t.refreshToken,!0);try{eg.setTime(Date.now());let e=await ea(t,a);ef("accessToken",e.accessToken),ef("expiresIn",e.expiresIn);let s=new Date(Date.now()+1e3*e.expiresIn);try{await ed(o,{...t,accessToken:e.accessToken,expiresAt:s.toISOString(),refreshToken:e.refreshToken})}catch(e){}return{token:e.accessToken,expiration:s}}catch(e){return ec(u),u}},ew=async({ssoStartUrl:e,ssoSession:t,ssoAccountId:i,ssoRegion:n,ssoRoleName:o,ssoClient:l,clientConfig:a,profile:c,logger:f})=>{let u,d;let g="To refresh this SSO session run aws sso login with the corresponding profile.";if(t)try{let e=await eh({profile:c})();u={accessToken:e.token,expiresAt:new Date(e.expiration).toISOString()}}catch(e){throw new r.mV(e.message,{tryNextLink:!1,logger:f})}else try{u=await h(e)}catch(e){throw new r.mV(`The SSO session associated with this profile is invalid. ${g}`,{tryNextLink:!1,logger:f})}if(new Date(u.expiresAt).getTime()-Date.now()<=0)throw new r.mV(`The SSO session associated with this profile has expired. ${g}`,{tryNextLink:!1,logger:f});let{accessToken:w}=u,{SSOClient:p,GetRoleCredentialsCommand:S}=await s.e(154).then(s.bind(s,2154)),_=l||new p(Object.assign({},a??{},{region:a?.region??n}));try{d=await _.send(new S({accountId:i,roleName:o,accessToken:w}))}catch(e){throw new r.mV(e,{tryNextLink:!1,logger:f})}let{roleCredentials:{accessKeyId:m,secretAccessKey:O,sessionToken:x,expiration:y,credentialScope:I,accountId:b}={}}=d;if(!m||!O||!x||!y)throw new r.mV("SSO returns an invalid temporary credential.",{tryNextLink:!1,logger:f});let k={accessKeyId:m,secretAccessKey:O,sessionToken:x,expiration:new Date(y),...I&&{credentialScope:I},...b&&{accountId:b}};return t?(0,N.P)(k,"CREDENTIALS_SSO","s"):(0,N.P)(k,"CREDENTIALS_SSO_LEGACY","u"),k},ep=(e,t)=>{let{sso_start_url:s,sso_account_id:i,sso_region:n,sso_role_name:o}=e;if(!s||!i||!n||!o)throw new r.mV(`Profile is configured with invalid SSO credentials. Required parameters "sso_account_id", "sso_region", "sso_role_name", "sso_start_url". Got ${Object.keys(e).join(", ")}
Reference: https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-sso.html`,{tryNextLink:!1,logger:t});return e},eS=(e={})=>async()=>{e.logger?.debug("@aws-sdk/credential-provider-sso - fromSSO");let{ssoStartUrl:t,ssoAccountId:s,ssoRegion:i,ssoRoleName:n,ssoSession:o}=e,{ssoClient:l}=e,a=c(e);if(t||s||i||n||o){if(t&&s&&i&&n)return ew({ssoStartUrl:t,ssoSession:o,ssoAccountId:s,ssoRegion:i,ssoRoleName:n,ssoClient:l,clientConfig:e.clientConfig,profile:a});throw new r.mV('Incomplete configuration. The fromSSO() argument hash must include "ssoStartUrl", "ssoAccountId", "ssoRegion", "ssoRoleName"',{tryNextLink:!1,logger:e.logger})}{let s=(await E(e))[a];if(!s)throw new r.mV(`Profile ${a} was not found.`,{logger:e.logger});if(!L(s))throw new r.mV(`Profile ${a} is not configured with SSO credentials.`,{logger:e.logger});if(s?.sso_session){let n=(await C(e))[s.sso_session],o=` configurations in profile ${a} and sso-session ${s.sso_session}`;if(i&&i!==n.sso_region)throw new r.mV("Conflicting SSO region"+o,{tryNextLink:!1,logger:e.logger});if(t&&t!==n.sso_start_url)throw new r.mV("Conflicting SSO start_url"+o,{tryNextLink:!1,logger:e.logger});s.sso_region=n.sso_region,s.sso_start_url=n.sso_start_url}let{sso_start_url:n,sso_account_id:o,sso_region:c,sso_role_name:f,sso_session:u}=ep(s,e.logger);return ew({ssoStartUrl:n,ssoSession:u,ssoAccountId:o,ssoRegion:c,ssoRoleName:f,ssoClient:l,clientConfig:e.clientConfig,profile:a})}}}};
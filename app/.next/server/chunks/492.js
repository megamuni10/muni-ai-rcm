"use strict";exports.id=492,exports.ids=[492],exports.modules={1492:(e,t,r)=>{r.d(t,{ENV_CMDS_FULL_URI:()=>m,ENV_CMDS_RELATIVE_URI:()=>v,fromContainerMetadata:()=>_,fromInstanceMetadata:()=>ed,getInstanceMetadataEndpoint:()=>et,httpRequest:()=>l});var a,n,i=r(9776),o=r(7310),s=r(4300),c=r(3685);function l(e){return new Promise((t,r)=>{let a=(0,c.request)({method:"GET",...e,hostname:e.hostname?.replace(/^\[(.+)\]$/,"$1")});a.on("error",e=>{r(Object.assign(new i.kb("Unable to connect to instance metadata service"),e)),a.destroy()}),a.on("timeout",()=>{r(new i.kb("TimeoutError from instance metadata service")),a.destroy()}),a.on("response",e=>{let{statusCode:n=400}=e;(n<200||300<=n)&&(r(Object.assign(new i.kb("Error response received from instance metadata service"),{statusCode:n})),a.destroy());let o=[];e.on("data",e=>{o.push(e)}),e.on("end",()=>{t(s.Buffer.concat(o)),a.destroy()})}),a.end()})}let d=e=>!!e&&"object"==typeof e&&"string"==typeof e.AccessKeyId&&"string"==typeof e.SecretAccessKey&&"string"==typeof e.Token&&"string"==typeof e.Expiration,u=e=>({accessKeyId:e.AccessKeyId,secretAccessKey:e.SecretAccessKey,sessionToken:e.Token,expiration:new Date(e.Expiration),...e.AccountId&&{accountId:e.AccountId}}),f=1e3,p=0,h=({maxRetries:e=p,timeout:t=f})=>({maxRetries:e,timeout:t}),g=(e,t)=>{let r=e();for(let a=0;a<t;a++)r=r.catch(e);return r},m="AWS_CONTAINER_CREDENTIALS_FULL_URI",v="AWS_CONTAINER_CREDENTIALS_RELATIVE_URI",w="AWS_CONTAINER_AUTHORIZATION_TOKEN",_=(e={})=>{let{timeout:t,maxRetries:r}=h(e);return()=>g(async()=>{let r=await A({logger:e.logger}),a=JSON.parse(await E(t,r));if(!d(a))throw new i.mV("Invalid response received from instance metadata service.",{logger:e.logger});return u(a)},r)},E=async(e,t)=>(process.env[w]&&(t.headers={...t.headers,Authorization:process.env[w]}),(await l({...t,timeout:e})).toString()),I={localhost:!0,"127.0.0.1":!0},y={"http:":!0,"https:":!0},A=async({logger:e})=>{if(process.env[v])return{hostname:"169.254.170.2",path:process.env[v]};if(process.env[m]){let t=(0,o.parse)(process.env[m]);if(!t.hostname||!(t.hostname in I))throw new i.mV(`${t.hostname} is not a valid container metadata service hostname`,{tryNextLink:!1,logger:e});if(!t.protocol||!(t.protocol in y))throw new i.mV(`${t.protocol} is not a valid container metadata service protocol`,{tryNextLink:!1,logger:e});return{...t,port:t.port?parseInt(t.port,10):void 0}}throw new i.mV(`The container metadata credential provider cannot be used unless the ${v} or ${m} environment variable is set`,{tryNextLink:!1,logger:e})};function S(e){try{let t=new Set(Array.from(e.match(/([A-Z_]){3,}/g)??[]));return t.delete("CONFIG"),t.delete("CONFIG_PREFIX_SEPARATOR"),t.delete("ENV"),[...t].join(", ")}catch(t){return e}}let b=(e,t)=>async()=>{try{let t=e(process.env);if(void 0===t)throw Error();return t}catch(r){throw new i.mV(r.message||`Not found in ENV: ${S(e.toString())}`,{logger:t})}};var C=r(2037),N=r(1017);let T={},O=()=>process&&process.geteuid?`${process.geteuid()}`:"DEFAULT",D=()=>{let{HOME:e,USERPROFILE:t,HOMEPATH:r,HOMEDRIVE:a=`C:${N.sep}`}=process.env;if(e)return e;if(t)return t;if(r)return`${a}${r}`;let n=O();return T[n]||(T[n]=(0,C.homedir)()),T[n]},x=e=>e.profile||process.env.AWS_PROFILE||"default";r(6113);var V=r(7147);let{readFile:$}=V.promises;var k=r(5315);let P=e=>Object.entries(e).filter(([e])=>{let t=e.indexOf(q);return -1!==t&&Object.values(k.I).includes(e.substring(0,t))}).reduce((e,[t,r])=>{let a=t.indexOf(q);return e[t.substring(0,a)===k.I.PROFILE?t.substring(a+1):t]=r,e},{...e.default&&{default:e.default}}),R=()=>process.env.AWS_CONFIG_FILE||(0,N.join)(D(),".aws","config"),F=()=>process.env.AWS_SHARED_CREDENTIALS_FILE||(0,N.join)(D(),".aws","credentials"),L=/^([\w-]+)\s(["'])?([\w-@\+\.%:/]+)\2$/,M=["__proto__","profile __proto__"],j=e=>{let t,r;let a={};for(let n of e.split(/\r?\n/)){let e=n.split(/(^|\s)[;#]/)[0].trim();if("["===e[0]&&"]"===e[e.length-1]){t=void 0,r=void 0;let a=e.substring(1,e.length-1),n=L.exec(a);if(n){let[,e,,r]=n;Object.values(k.I).includes(e)&&(t=[e,r].join(q))}else t=a;if(M.includes(a))throw Error(`Found invalid profile name "${a}"`)}else if(t){let i=e.indexOf("=");if(![0,-1].includes(i)){let[o,s]=[e.substring(0,i).trim(),e.substring(i+1).trim()];if(""===s)r=o;else{r&&n.trimStart()===n&&(r=void 0),a[t]=a[t]||{};let e=r?[r,o].join(q):o;a[t][e]=s}}}}return a},{readFile:W}=V.promises,U={},K=(e,t)=>((!U[e]||t?.ignoreCache)&&(U[e]=W(e,"utf8")),U[e]),G=()=>({}),q=".",z=async(e={})=>{let{filepath:t=F(),configFilepath:r=R()}=e,a=D(),n=t;t.startsWith("~/")&&(n=(0,N.join)(a,t.slice(2)));let i=r;r.startsWith("~/")&&(i=(0,N.join)(a,r.slice(2)));let o=await Promise.all([K(i,{ignoreCache:e.ignoreCache}).then(j).then(P).catch(G),K(n,{ignoreCache:e.ignoreCache}).then(j).catch(G)]);return{configFile:o[0],credentialsFile:o[1]}},H=(e,{preferredFile:t="config",...r}={})=>async()=>{let a=x(r),{configFile:n,credentialsFile:o}=await z(r),s=o[a]||{},c=n[a]||{},l="config"===t?{...s,...c}:{...c,...s};try{let r=e(l,"config"===t?n:o);if(void 0===r)throw Error();return r}catch(t){throw new i.mV(t.message||`Not found in config files w/ profile [${a}]: ${S(e.toString())}`,{logger:r.logger})}},B=e=>"function"==typeof e,J=e=>B(e)?async()=>await e():(0,i.f$)(e),Z=({environmentVariableSelector:e,configFileSelector:t,default:r},a={})=>(0,i.HP)((0,i.tS)(b(e),H(t,a),J(r)));class X extends i.mV{constructor(e,t=!0){super(e,t),this.tryNextLink=t,this.name="InstanceMetadataV1FallbackError",Object.setPrototypeOf(this,X.prototype)}}var Q=r(3956);!function(e){e.IPv4="http://169.254.169.254",e.IPv6="http://[fd00:ec2::254]"}(a||(a={}));let Y={environmentVariableSelector:e=>e.AWS_EC2_METADATA_SERVICE_ENDPOINT,configFileSelector:e=>e.ec2_metadata_service_endpoint,default:void 0};!function(e){e.IPv4="IPv4",e.IPv6="IPv6"}(n||(n={}));let ee={environmentVariableSelector:e=>e.AWS_EC2_METADATA_SERVICE_ENDPOINT_MODE,configFileSelector:e=>e.ec2_metadata_service_endpoint_mode,default:n.IPv4},et=async()=>(0,Q.e)(await er()||await ea()),er=async()=>Z(Y)(),ea=async()=>{let e=await Z(ee)();switch(e){case n.IPv4:return a.IPv4;case n.IPv6:return a.IPv6;default:throw Error(`Unsupported endpoint mode: ${e}. Select from ${Object.values(n)}`)}},en=(e,t)=>{let r=new Date(Date.now()+1e3*(300+Math.floor(300*Math.random())));t.warn(`Attempting credential expiration extension due to a credential service availability issue. A refresh of these credentials will be attempted after ${new Date(r)}.
For more information, please visit: https://docs.aws.amazon.com/sdkref/latest/guide/feature-static-credentials.html`);let a=e.originalExpiration??e.expiration;return{...e,...a?{originalExpiration:a}:{},expiration:r}},ei=(e,t={})=>{let r;let a=t?.logger||console;return async()=>{let t;try{(t=await e()).expiration&&t.expiration.getTime()<Date.now()&&(t=en(t,a))}catch(e){if(r)a.warn("Credential renew failed: ",e),t=en(r,a);else throw e}return r=t,t}},eo="/latest/meta-data/iam/security-credentials/",es="AWS_EC2_METADATA_V1_DISABLED",ec="ec2_metadata_v1_disabled",el="x-aws-ec2-metadata-token",ed=(e={})=>ei(eu(e),{logger:e.logger}),eu=(e={})=>{let t=!1,{logger:r,profile:a}=e,{timeout:n,maxRetries:o}=h(e),s=async(r,n)=>{if(t||n.headers?.[el]==null){let t=!1,r=!1,n=await Z({environmentVariableSelector:t=>{let a=t[es];if(r=!!a&&"false"!==a,void 0===a)throw new i.mV(`${es} not set in env, checking config file next.`,{logger:e.logger});return r},configFileSelector:e=>{let r=e[ec];return t=!!r&&"false"!==r},default:!1},{profile:a})();if(e.ec2MetadataV1Disabled||n){let a=[];throw e.ec2MetadataV1Disabled&&a.push("credential provider initialization (runtime option ec2MetadataV1Disabled)"),t&&a.push(`config file profile (${ec})`),r&&a.push(`process environment variable (${es})`),new X(`AWS EC2 Metadata v1 fallback has been blocked by AWS SDK configuration in the following: [${a.join(", ")}].`)}}let o=(await g(async()=>{let e;try{e=await ep(n)}catch(e){throw 401===e.statusCode&&(t=!1),e}return e},r)).trim();return g(async()=>{let r;try{r=await eh(o,n,e)}catch(e){throw 401===e.statusCode&&(t=!1),e}return r},r)};return async()=>{let e=await et();if(t)return r?.debug("AWS SDK Instance Metadata","using v1 fallback (no token fetch)"),s(o,{...e,timeout:n});{let a;try{a=(await ef({...e,timeout:n})).toString()}catch(a){if(a?.statusCode===400)throw Object.assign(a,{message:"EC2 Metadata token request returned error"});return("TimeoutError"===a.message||[403,404,405].includes(a.statusCode))&&(t=!0),r?.debug("AWS SDK Instance Metadata","using v1 fallback (initial)"),s(o,{...e,timeout:n})}return s(o,{...e,headers:{[el]:a},timeout:n})}}},ef=async e=>l({...e,path:"/latest/api/token",method:"PUT",headers:{"x-aws-ec2-metadata-token-ttl-seconds":"21600"}}),ep=async e=>(await l({...e,path:eo})).toString(),eh=async(e,t,r)=>{let a=JSON.parse((await l({...t,path:eo+e})).toString());if(!d(a))throw new i.mV("Invalid response received from instance metadata service.",{logger:r.logger});return u(a)}}};
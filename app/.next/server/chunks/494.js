"use strict";exports.id=494,exports.ids=[494],exports.modules={7494:(e,n,i)=>{i.r(n),i.d(n,{fromTokenFile:()=>d,fromWebToken:()=>s});var o=i(1315),r=i(9776),t=i(7147);let s=e=>async()=>{e.logger?.debug("@aws-sdk/credential-provider-web-identity - fromWebToken");let{roleArn:n,roleSessionName:o,webIdentityToken:r,providerId:t,policyArns:s,policy:l,durationSeconds:d}=e,{roleAssumerWithWebIdentity:a}=e;if(!a){let{getDefaultRoleAssumerWithWebIdentity:n}=await i.e(160).then(i.bind(i,8160));a=n({...e.clientConfig,credentialProviderLogger:e.logger,parentClientConfig:e.parentClientConfig},e.clientPlugins)}return a({RoleArn:n,RoleSessionName:o??`aws-sdk-js-session-${Date.now()}`,WebIdentityToken:r,ProviderId:t,PolicyArns:s,Policy:l,DurationSeconds:d})},l="AWS_WEB_IDENTITY_TOKEN_FILE",d=(e={})=>async()=>{e.logger?.debug("@aws-sdk/credential-provider-web-identity - fromTokenFile");let n=e?.webIdentityTokenFile??process.env[l],i=e?.roleArn??process.env.AWS_ROLE_ARN,d=e?.roleSessionName??process.env.AWS_ROLE_SESSION_NAME;if(!n||!i)throw new r.mV("Web identity configuration not specified",{logger:e.logger});let a=await s({...e,webIdentityToken:(0,t.readFileSync)(n,{encoding:"ascii"}),roleArn:i,roleSessionName:d})();return n===process.env[l]&&(0,o.P)(a,"CREDENTIALS_ENV_VARS_STS_WEB_ID_TOKEN","h"),a}}};
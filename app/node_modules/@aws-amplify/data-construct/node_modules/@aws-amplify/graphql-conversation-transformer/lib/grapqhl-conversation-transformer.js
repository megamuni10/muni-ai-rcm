"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConversationTransformer = void 0;
const graphql_directives_1 = require("@aws-amplify/graphql-directives");
const graphql_transformer_core_1 = require("@aws-amplify/graphql-transformer-core");
const conversation_prepare_handler_1 = require("./transformer-steps/conversation-prepare-handler");
const conversation_resolver_generator_1 = require("./transformer-steps/conversation-resolver-generator");
const conversation_field_handler_1 = require("./transformer-steps/conversation-field-handler");
const semver = __importStar(require("semver"));
class ConversationTransformer extends graphql_transformer_core_1.TransformerPluginBase {
    constructor(modelTransformer, hasManyTransformer, belongsToTransformer, authProvider, functionNameMap) {
        super('amplify-conversation-transformer', graphql_directives_1.ConversationDirective.definition);
        this.directives = [];
        this.field = (parent, definition, directive, context) => {
            const directiveConfg = this.fieldHandler.getDirectiveConfig(parent, definition, directive, context);
            this.directives.push(directiveConfg);
        };
        this.generateResolvers = (ctx) => {
            this.resolverGenerator.generateResolvers(this.directives, ctx);
        };
        this.prepare = (ctx) => {
            this.prepareHandler.prepare(ctx, this.directives);
        };
        this.validate = () => {
            for (const directive of this.directives) {
                if (directive.field.type.kind !== 'NamedType' || directive.field.type.name.value !== 'ConversationMessage') {
                    throw new graphql_transformer_core_1.InvalidDirectiveError('@conversation return type must be ConversationMessage');
                }
                if (directive.handler && directive.functionName) {
                    throw new graphql_transformer_core_1.InvalidDirectiveError("'functionName' and 'handler' are mutually exclusive");
                }
                if (directive.handler) {
                    const eventVersion = semver.coerce(directive.handler.eventVersion);
                    if ((eventVersion === null || eventVersion === void 0 ? void 0 : eventVersion.major) !== 1) {
                        throw new Error(`Unsupported custom conversation handler. Expected eventVersion to match 1.x, received ${directive.handler.eventVersion}`);
                    }
                }
            }
        };
        this.fieldHandler = new conversation_field_handler_1.ConversationFieldHandler();
        this.prepareHandler = new conversation_prepare_handler_1.ConversationPrepareHandler(modelTransformer, hasManyTransformer, belongsToTransformer, authProvider);
        this.resolverGenerator = new conversation_resolver_generator_1.ConversationResolverGenerator(functionNameMap);
    }
}
exports.ConversationTransformer = ConversationTransformer;
//# sourceMappingURL=grapqhl-conversation-transformer.js.map
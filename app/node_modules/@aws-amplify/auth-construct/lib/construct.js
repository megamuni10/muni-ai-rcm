"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AmplifyAuth = void 0;
const constructs_1 = require("constructs");
const aws_cdk_lib_1 = require("aws-cdk-lib");
const aws_cognito_1 = require("aws-cdk-lib/aws-cognito");
const aws_iam_1 = require("aws-cdk-lib/aws-iam");
const backend_output_schemas_1 = require("@aws-amplify/backend-output-schemas");
const defaults_js_1 = require("./defaults.js");
const backend_output_storage_1 = require("@aws-amplify/backend-output-storage");
const path = __importStar(require("path"));
const oauthProviderToProviderDomainMap = {
    facebook: 'graph.facebook.com',
    google: 'accounts.google.com',
    amazon: 'www.amazon.com',
    apple: 'appleid.apple.com',
};
const INVITATION_PLACEHOLDERS = {
    CODE: '{####}',
    USERNAME: '{username}',
};
const VERIFICATION_EMAIL_PLACEHOLDERS = {
    CODE: '{####}',
    LINK: '{##Verify Email##}',
};
const VERIFICATION_SMS_PLACEHOLDERS = {
    CODE: '{####}',
};
const MFA_SMS_PLACEHOLDERS = {
    CODE: '{####}',
};
const DEFAULT_OAUTH_SCOPES = [
    aws_cognito_1.OAuthScope.PHONE,
    aws_cognito_1.OAuthScope.EMAIL,
    aws_cognito_1.OAuthScope.OPENID,
    aws_cognito_1.OAuthScope.PROFILE,
    aws_cognito_1.OAuthScope.COGNITO_ADMIN,
];
// Be very careful editing this value. It is the string that is used to attribute stacks to Amplify Auth in BI metrics
const authStackType = 'auth-Cognito';
/**
 * Amplify Auth CDK Construct
 */
class AmplifyAuth extends constructs_1.Construct {
    /**
     * Create a new Auth construct with AuthProps.
     * If no props are provided, email login and defaults will be used.
     */
    constructor(scope, id, props = defaults_js_1.DEFAULTS.IF_NO_PROPS_PROVIDED) {
        var _a, _b;
        super(scope, id);
        this.groups = {};
        /**
         * Create Auth/UnAuth Roles
         * @returns DefaultRoles
         */
        this.setupAuthAndUnAuthRoles = (identityPoolId) => {
            const result = {
                auth: new aws_iam_1.Role(this, `${this.name}authenticatedUserRole`, {
                    assumedBy: new aws_iam_1.FederatedPrincipal('cognito-identity.amazonaws.com', {
                        StringEquals: {
                            'cognito-identity.amazonaws.com:aud': identityPoolId,
                        },
                        'ForAnyValue:StringLike': {
                            'cognito-identity.amazonaws.com:amr': 'authenticated',
                        },
                    }, 'sts:AssumeRoleWithWebIdentity'),
                }),
                unAuth: new aws_iam_1.Role(this, `${this.name}unauthenticatedUserRole`, {
                    assumedBy: new aws_iam_1.FederatedPrincipal('cognito-identity.amazonaws.com', {
                        StringEquals: {
                            'cognito-identity.amazonaws.com:aud': identityPoolId,
                        },
                        'ForAnyValue:StringLike': {
                            'cognito-identity.amazonaws.com:amr': 'unauthenticated',
                        },
                    }, 'sts:AssumeRoleWithWebIdentity'),
                }),
            };
            return result;
        };
        /**
         * Auto generate the user pool groups and group roles
         */
        this.setupUserPoolGroups = (groups, identityPool) => {
            (groups || []).forEach((groupName, index) => {
                const groupRole = new aws_iam_1.Role(this, `${this.name}${groupName}GroupRole`, {
                    assumedBy: new aws_iam_1.FederatedPrincipal('cognito-identity.amazonaws.com', {
                        StringEquals: {
                            'cognito-identity.amazonaws.com:aud': identityPool.ref,
                        },
                        'ForAnyValue:StringLike': {
                            'cognito-identity.amazonaws.com:amr': 'authenticated',
                        },
                    }, 'sts:AssumeRoleWithWebIdentity'),
                });
                const currentGroup = new aws_cognito_1.CfnUserPoolGroup(this, `${this.name}${groupName}Group`, {
                    userPoolId: this.userPool.userPoolId,
                    groupName: groupName,
                    roleArn: groupRole.roleArn,
                    precedence: index,
                });
                this.groups[groupName] = {
                    cfnUserGroup: currentGroup,
                    role: groupRole,
                };
            });
        };
        /**
         * Setup Identity Pool with default roles/role mappings, and register providers
         */
        this.setupIdentityPool = (userPool, userPoolClient, providerSetupResult) => {
            // setup identity pool
            const region = aws_cdk_lib_1.Stack.of(this).region;
            const identityPool = new aws_cdk_lib_1.aws_cognito.CfnIdentityPool(this, `${this.name}IdentityPool`, {
                allowUnauthenticatedIdentities: defaults_js_1.DEFAULTS.ALLOW_UNAUTHENTICATED_IDENTITIES,
            });
            const roles = this.setupAuthAndUnAuthRoles(identityPool.ref);
            const identityPoolRoleAttachment = new aws_cdk_lib_1.aws_cognito.CfnIdentityPoolRoleAttachment(this, `${this.name}IdentityPoolRoleAttachment`, {
                identityPoolId: identityPool.ref,
                roles: {
                    unauthenticated: roles.unAuth.roleArn,
                    authenticated: roles.auth.roleArn,
                },
                roleMappings: {
                    UserPoolWebClientRoleMapping: {
                        type: 'Token',
                        ambiguousRoleResolution: 'AuthenticatedRole',
                        identityProvider: `cognito-idp.${region}.amazonaws.com/${userPool.userPoolId}:${userPoolClient.userPoolClientId}`,
                    },
                },
            });
            identityPoolRoleAttachment.addDependency(identityPool);
            identityPoolRoleAttachment.node.addDependency(userPoolClient);
            // add cognito provider
            identityPool.cognitoIdentityProviders = [
                {
                    clientId: userPoolClient.userPoolClientId,
                    providerName: `cognito-idp.${region}.amazonaws.com/${userPool.userPoolId}`,
                },
            ];
            // add other providers
            identityPool.supportedLoginProviders = providerSetupResult.oAuthMappings;
            return {
                identityPool,
                identityPoolRoleAttachment,
                roles,
            };
        };
        /**
         * Define bindCustomAttribute to meet requirements of the Cognito API to call the bind method
         */
        this.bindCustomAttribute = (key, attribute) => {
            var _a;
            const baseConfig = {
                dataType: attribute.dataType,
                mutable: (_a = attribute.mutable) !== null && _a !== void 0 ? _a : true,
            };
            let constraints = {};
            // Conditionally add constraint properties based on dataType.
            if (attribute.dataType === 'String') {
                constraints = {
                    stringConstraints: {
                        minLen: attribute.minLen,
                        maxLen: attribute.maxLen,
                    },
                };
            }
            else if (attribute.dataType === 'Number') {
                constraints = {
                    numberConstraints: {
                        min: attribute.min,
                        max: attribute.max,
                    },
                };
            }
            //The final config object includes baseConfig and conditionally added constraint properties.
            const config = {
                ...baseConfig,
                ...constraints,
            };
            return {
                ...config,
                bind: () => config,
            };
        };
        /**
         * Process props into UserPoolProps (set defaults if needed)
         */
        this.getUserPoolProps = (props) => {
            var _a, _b;
            const emailEnabled = props.loginWith.email ? true : false;
            const phoneEnabled = props.loginWith.phone ? true : false;
            const oneOfEmailOrPhone = emailEnabled || phoneEnabled;
            if (!oneOfEmailOrPhone) {
                throw Error('At least one of email or phone must be enabled.');
            }
            let userVerificationSettings = {};
            // extract email settings if settings object is defined
            if (typeof props.loginWith.email === 'object') {
                const emailSettings = props.loginWith.email;
                // verify email body and inject the actual template values which cognito uses
                const emailBody = this.verifyEmailBody(emailSettings);
                userVerificationSettings = {
                    emailBody: emailBody,
                    emailStyle: this.getEmailVerificationStyle(emailSettings.verificationEmailStyle),
                    emailSubject: emailSettings.verificationEmailSubject,
                };
            }
            // extract phone settings if settings object is defined
            if (typeof props.loginWith.phone === 'object') {
                const phoneSettings = props.loginWith.phone;
                let smsMessage;
                if (phoneSettings.verificationMessage &&
                    typeof phoneSettings.verificationMessage === 'function') {
                    // validate sms message structure
                    smsMessage = phoneSettings.verificationMessage(() => VERIFICATION_SMS_PLACEHOLDERS.CODE);
                    if (!smsMessage.includes(VERIFICATION_SMS_PLACEHOLDERS.CODE)) {
                        throw Error("Invalid phone settings. Property 'verificationMessage' must utilize the 'code' parameter at least once as a placeholder for the verification code.");
                    }
                }
                userVerificationSettings = {
                    ...userVerificationSettings,
                    smsMessage: smsMessage,
                };
            }
            const mfaType = this.getMFAType(props.multifactor);
            const mfaMode = this.getMFAMode(props.multifactor);
            // If phone login is enabled along with MFA, cognito requires that mfa SMS type to be enabled.
            if (phoneEnabled && mfaMode && mfaMode !== 'OFF' && !(mfaType === null || mfaType === void 0 ? void 0 : mfaType.sms)) {
                throw Error('Invalid MFA settings. SMS must be enabled in multiFactor if loginWith phone is enabled');
            }
            const { standardAttributes, customAttributes } = Object.entries((_a = props.userAttributes) !== null && _a !== void 0 ? _a : {}).reduce((acc, [key, value]) => {
                if (key.startsWith('custom:')) {
                    const attributeKey = key.replace(/^custom:/i, '');
                    acc.customAttributes[attributeKey] = this.bindCustomAttribute(attributeKey, value);
                }
                else {
                    acc.standardAttributes[key] = value;
                }
                return acc;
            }, { standardAttributes: {}, customAttributes: {} });
            const userPoolProps = {
                signInCaseSensitive: defaults_js_1.DEFAULTS.SIGN_IN_CASE_SENSITIVE,
                signInAliases: {
                    phone: phoneEnabled,
                    email: emailEnabled,
                },
                keepOriginal: {
                    email: emailEnabled,
                    phone: phoneEnabled,
                },
                autoVerify: {
                    email: emailEnabled,
                    phone: phoneEnabled,
                },
                userVerification: userVerificationSettings,
                passwordPolicy: defaults_js_1.DEFAULTS.PASSWORD_POLICY,
                standardAttributes: {
                    email: defaults_js_1.DEFAULTS.IS_REQUIRED_ATTRIBUTE.email(emailEnabled),
                    phoneNumber: defaults_js_1.DEFAULTS.IS_REQUIRED_ATTRIBUTE.phoneNumber(phoneEnabled),
                    ...standardAttributes,
                },
                customAttributes: {
                    ...customAttributes,
                },
                email: props.senders
                    ? aws_cdk_lib_1.aws_cognito.UserPoolEmail.withSES({
                        fromEmail: props.senders.email.fromEmail,
                        fromName: props.senders.email.fromName,
                        replyTo: props.senders.email.replyTo,
                        sesRegion: aws_cdk_lib_1.Stack.of(this).region,
                    })
                    : undefined,
                selfSignUpEnabled: defaults_js_1.DEFAULTS.ALLOW_SELF_SIGN_UP,
                mfa: mfaMode,
                mfaMessage: this.getMFAMessage(props.multifactor),
                mfaSecondFactor: mfaType,
                accountRecovery: this.getAccountRecoverySetting(emailEnabled, phoneEnabled, props.accountRecovery),
                removalPolicy: aws_cdk_lib_1.RemovalPolicy.DESTROY,
                userInvitation: typeof props.loginWith.email !== 'boolean'
                    ? this.getUserInvitationSettings((_b = props.loginWith.email) === null || _b === void 0 ? void 0 : _b.userInvitation)
                    : undefined,
            };
            return userPoolProps;
        };
        /**
         * Get email verification style from user props
         * @param verificationEmailStyle - string value
         * @returns verificationEmailStyle - enum value
         */
        this.getEmailVerificationStyle = (verificationEmailStyle) => {
            if (verificationEmailStyle === 'CODE') {
                return aws_cdk_lib_1.aws_cognito.VerificationEmailStyle.CODE;
            }
            else if (verificationEmailStyle === 'LINK') {
                return aws_cdk_lib_1.aws_cognito.VerificationEmailStyle.LINK;
            }
            return undefined;
        };
        /**
         * Determine the account recovery option based on enabled login methods.
         * @param emailEnabled - is email enabled
         * @param phoneEnabled - is phone enabled
         * @param accountRecoveryMethodAsString - the user provided account recovery setting
         * @returns account recovery setting enum value
         */
        this.getAccountRecoverySetting = (emailEnabled, phoneEnabled, accountRecoveryMethodAsString) => {
            const accountRecovery = this.convertAccountRecoveryStringToEnum(accountRecoveryMethodAsString);
            if (accountRecovery !== undefined) {
                return accountRecovery;
            }
            // set default based on enabled login methods
            if (phoneEnabled && emailEnabled) {
                return aws_cdk_lib_1.aws_cognito.AccountRecovery.EMAIL_ONLY;
            }
            if (phoneEnabled) {
                return aws_cdk_lib_1.aws_cognito.AccountRecovery.PHONE_ONLY_WITHOUT_MFA;
            }
            if (emailEnabled) {
                return aws_cdk_lib_1.aws_cognito.AccountRecovery.EMAIL_ONLY;
            }
            return undefined;
        };
        /**
         * Convert user friendly Mfa mode to cognito Mfa Mode.
         * This eliminates the need for users to import cognito.Mfa.
         * @param mfa - MFA settings
         * @returns cognito MFA enforcement mode
         */
        this.getMFAMode = (mfa) => {
            if (mfa) {
                switch (mfa.mode) {
                    case 'OFF':
                        return aws_cognito_1.Mfa.OFF;
                    case 'OPTIONAL':
                        return aws_cognito_1.Mfa.OPTIONAL;
                    case 'REQUIRED':
                        return aws_cognito_1.Mfa.REQUIRED;
                }
            }
            return undefined;
        };
        /**
         * Convert user friendly Mfa type to cognito Mfa type.
         * This eliminates the need for users to import cognito.Mfa.
         * @param mfa - MFA settings
         * @returns cognito MFA type (sms or totp)
         */
        this.getMFAType = (mfa) => {
            return typeof mfa === 'object' && mfa.mode !== 'OFF'
                ? {
                    sms: mfa.sms ? true : false,
                    otp: mfa.totp ? true : false,
                }
                : undefined;
        };
        /**
         * Convert user friendly account recovery method to cognito AccountRecover enum.
         * This eliminates the need for users to import cognito.AccountRecovery.
         * @param method - account recovery method as a string value
         * @returns cognito.AccountRecovery enum value
         */
        this.convertAccountRecoveryStringToEnum = (method) => {
            if (method !== undefined) {
                return aws_cdk_lib_1.aws_cognito.AccountRecovery[method];
            }
            return undefined;
        };
        /**
         * Extract the MFA message settings and perform validation.
         * @param mfa - MFA settings
         * @returns mfa message
         */
        this.getMFAMessage = (mfa) => {
            if (mfa && mfa.mode !== 'OFF' && typeof mfa.sms === 'object') {
                const message = mfa.sms.smsMessage(() => MFA_SMS_PLACEHOLDERS.CODE);
                if (!message.includes(MFA_SMS_PLACEHOLDERS.CODE)) {
                    throw Error("Invalid MFA settings. Property 'smsMessage' must utilize the 'code' parameter at least once as a placeholder for the verification code.");
                }
                return message;
            }
            return undefined;
        };
        /**
         * Setup External Providers (OAuth/OIDC/SAML) and related settings
         * such as OAuth settings and User Pool Domains
         */
        this.setupExternalProviders = (userPool, loginOptions) => {
            /**
             * If email is enabled, and is the only required attribute, we are able to
             * automatically map the email attribute from external providers, excluding SAML.
             */
            const shouldMapEmailAttributes = loginOptions.email && !loginOptions.phone;
            const result = {
                oAuthMappings: {},
                oAuthSettings: {
                    flows: defaults_js_1.DEFAULTS.OAUTH_FLOWS,
                },
            };
            // external providers
            const external = loginOptions.externalProviders;
            if (!external) {
                return result;
            }
            // make sure logout/callback urls are not empty
            if (external.logoutUrls && external.logoutUrls.length === 0) {
                throw Error('You must define logoutUrls when configuring external login providers.');
            }
            if (external.callbackUrls && external.callbackUrls.length === 0) {
                throw Error('You must define callbackUrls when configuring external login providers.');
            }
            if (external.google) {
                const googleProps = external.google;
                result.google = new aws_cdk_lib_1.aws_cognito.UserPoolIdentityProviderGoogle(this, `${this.name}GoogleIdP`, {
                    userPool,
                    clientId: googleProps.clientId,
                    clientSecretValue: googleProps.clientSecret,
                    attributeMapping: {
                        ...(shouldMapEmailAttributes
                            ? {
                                email: aws_cognito_1.ProviderAttribute.GOOGLE_EMAIL,
                            }
                            : undefined),
                        ...this.convertToCognitoAttributeMapping(googleProps.attributeMapping),
                    },
                    scopes: googleProps.scopes,
                });
                result.oAuthMappings[oauthProviderToProviderDomainMap.google] =
                    external.google.clientId;
            }
            if (external.facebook) {
                result.facebook = new aws_cdk_lib_1.aws_cognito.UserPoolIdentityProviderFacebook(this, `${this.name}FacebookIDP`, {
                    userPool,
                    ...external.facebook,
                    attributeMapping: {
                        ...(shouldMapEmailAttributes
                            ? {
                                email: aws_cognito_1.ProviderAttribute.FACEBOOK_EMAIL,
                            }
                            : undefined),
                        ...this.convertToCognitoAttributeMapping(external.facebook.attributeMapping),
                    },
                });
                result.oAuthMappings[oauthProviderToProviderDomainMap.facebook] =
                    external.facebook.clientId;
            }
            if (external.loginWithAmazon) {
                result.amazon = new aws_cdk_lib_1.aws_cognito.UserPoolIdentityProviderAmazon(this, `${this.name}AmazonIDP`, {
                    userPool,
                    ...external.loginWithAmazon,
                    attributeMapping: {
                        ...(shouldMapEmailAttributes
                            ? {
                                email: aws_cognito_1.ProviderAttribute.AMAZON_EMAIL,
                            }
                            : undefined),
                        ...this.convertToCognitoAttributeMapping(external.loginWithAmazon.attributeMapping),
                    },
                });
                result.oAuthMappings[oauthProviderToProviderDomainMap.amazon] =
                    external.loginWithAmazon.clientId;
            }
            if (external.signInWithApple) {
                result.apple = new aws_cdk_lib_1.aws_cognito.UserPoolIdentityProviderApple(this, `${this.name}AppleIDP`, {
                    userPool,
                    ...external.signInWithApple,
                    attributeMapping: {
                        ...(shouldMapEmailAttributes
                            ? {
                                email: aws_cognito_1.ProviderAttribute.APPLE_EMAIL,
                            }
                            : undefined),
                        ...this.convertToCognitoAttributeMapping(external.signInWithApple.attributeMapping),
                    },
                });
                result.oAuthMappings[oauthProviderToProviderDomainMap.apple] =
                    external.signInWithApple.clientId;
            }
            if (external.oidc && external.oidc.length > 0) {
                result.oidc = [];
                external.oidc.forEach((provider, index) => {
                    var _a, _b;
                    const requestMethod = provider.attributeRequestMethod === undefined
                        ? 'GET' // default if not defined
                        : provider.attributeRequestMethod;
                    const generatedProvider = new aws_cdk_lib_1.aws_cognito.UserPoolIdentityProviderOidc(this, `${this.name}${(_a = provider.name) !== null && _a !== void 0 ? _a : index}OidcIDP`, {
                        userPool,
                        attributeRequestMethod: requestMethod === 'GET'
                            ? aws_cognito_1.OidcAttributeRequestMethod.GET
                            : aws_cognito_1.OidcAttributeRequestMethod.POST,
                        clientId: provider.clientId,
                        clientSecret: provider.clientSecret,
                        endpoints: provider.endpoints,
                        identifiers: provider.identifiers,
                        issuerUrl: provider.issuerUrl,
                        name: provider.name,
                        scopes: provider.scopes,
                        attributeMapping: {
                            ...(shouldMapEmailAttributes
                                ? {
                                    email: {
                                        attributeName: 'email',
                                    },
                                }
                                : undefined),
                            ...this.convertToCognitoAttributeMapping(provider.attributeMapping),
                        },
                    });
                    (_b = result.oidc) === null || _b === void 0 ? void 0 : _b.push(generatedProvider);
                });
            }
            if (external.saml) {
                const saml = external.saml;
                result.saml = new aws_cdk_lib_1.aws_cognito.UserPoolIdentityProviderSaml(this, `${this.name}SamlIDP`, {
                    userPool,
                    attributeMapping: this.convertToCognitoAttributeMapping(saml.attributeMapping),
                    identifiers: saml.identifiers,
                    idpSignout: saml.idpSignout,
                    metadata: {
                        metadataContent: saml.metadata.metadataContent,
                        metadataType: saml.metadata.metadataType === 'FILE'
                            ? aws_cognito_1.UserPoolIdentityProviderSamlMetadataType.FILE
                            : aws_cognito_1.UserPoolIdentityProviderSamlMetadataType.URL,
                    },
                    name: saml.name,
                });
            }
            // Always generate a domain prefix if external provider is configured
            if (this.domainPrefix) {
                this.userPool.addDomain(`${this.name}UserPoolDomain`, {
                    cognitoDomain: { domainPrefix: this.domainPrefix },
                });
            }
            else {
                throw new Error('Cognito Domain Prefix is missing when external providers are configured.');
            }
            // oauth settings for the UserPool client
            result.oAuthSettings = {
                callbackUrls: external.callbackUrls,
                logoutUrls: external.logoutUrls,
                scopes: external.scopes
                    ? this.getOAuthScopes(external.scopes)
                    : DEFAULT_OAUTH_SCOPES,
                flows: defaults_js_1.DEFAULTS.OAUTH_FLOWS,
            };
            return result;
        };
        /**
         * Converts the simplified mapping type to cognito.AttributeMapping.
         * @param mapping the AttributeMapping to convert to a cognito.AttributeMapping
         * @returns cognito.AttributeMapping
         */
        this.convertToCognitoAttributeMapping = (mapping) => {
            if (!mapping) {
                return undefined;
            }
            const result = {};
            for (const [attrName, value] of Object.entries(mapping)) {
                if (typeof value === 'string') {
                    result[attrName] = {
                        attributeName: value,
                    };
                }
                if (typeof value === 'object' && attrName === 'custom') {
                    // dealing with custom attributes
                    const customAttributes = {};
                    for (const [customKey, attrName] of Object.entries(value)) {
                        customAttributes[customKey] = {
                            attributeName: attrName,
                        };
                    }
                    result[attrName] = customAttributes;
                }
            }
            return result;
        };
        /**
         * Convert scopes from string list to OAuthScopes.
         * @param scopes - scope list
         * @returns cognito OAuthScopes
         */
        this.getOAuthScopes = (scopes) => {
            if (scopes === undefined) {
                return [];
            }
            const result = [];
            for (const scope of scopes) {
                result.push(aws_cdk_lib_1.aws_cognito.OAuthScope[scope]);
            }
            return result;
        };
        /**
         * Stores auth output using the provided strategy
         */
        this.storeOutput = (outputStorageStrategy = new backend_output_storage_1.StackMetadataBackendOutputStorageStrategy(aws_cdk_lib_1.Stack.of(this))) => {
            const cfnUserPool = this.resources.cfnResources.cfnUserPool;
            const cfnUserPoolClient = this.resources.cfnResources.cfnUserPoolClient;
            const cfnIdentityPool = this.resources.cfnResources.cfnIdentityPool;
            // these properties cannot be overwritten
            const output = {
                userPoolId: this.resources.userPool.userPoolId,
                webClientId: this.resources.userPoolClient.userPoolClientId,
                identityPoolId: cfnIdentityPool.ref,
                authRegion: aws_cdk_lib_1.Stack.of(this).region,
            };
            // the properties below this line can be overwritten, so they are exposed via cdk LAZY
            output.allowUnauthenticatedIdentities = aws_cdk_lib_1.Lazy.string({
                produce: () => cfnIdentityPool.allowUnauthenticatedIdentities === true
                    ? 'true'
                    : 'false',
            });
            // extract signupAttributes from UserPool schema's required attributes
            output.signupAttributes = aws_cdk_lib_1.Lazy.string({
                produce: () => {
                    if (!cfnUserPool.schema) {
                        return '[]';
                    }
                    return JSON.stringify(cfnUserPool.schema
                        .filter((attribute) => attribute.required && attribute.name)
                        .map((attribute) => { var _a; return (_a = attribute.name) === null || _a === void 0 ? void 0 : _a.toLowerCase(); }));
                },
            });
            // extract usernameAttributes from UserPool's usernameAttributes
            output.usernameAttributes = aws_cdk_lib_1.Lazy.string({
                produce: () => {
                    var _a;
                    return JSON.stringify(((_a = cfnUserPool.usernameAttributes) === null || _a === void 0 ? void 0 : _a.map((attr) => attr.toLowerCase())) ||
                        []);
                },
            });
            // extract verificationMechanisms from UserPool's autoVerifiedAttributes
            output.verificationMechanisms = aws_cdk_lib_1.Lazy.string({
                produce: () => {
                    var _a;
                    return JSON.stringify((_a = cfnUserPool.autoVerifiedAttributes) !== null && _a !== void 0 ? _a : []);
                },
            });
            // extract the passwordPolicy from the UserPool policies
            output.passwordPolicyMinLength = aws_cdk_lib_1.Lazy.string({
                produce: () => {
                    var _a;
                    if (!cfnUserPool.policies) {
                        return '';
                    }
                    const policy = cfnUserPool.policies
                        .passwordPolicy;
                    return (_a = policy.minimumLength) === null || _a === void 0 ? void 0 : _a.toString();
                },
            });
            output.passwordPolicyRequirements = aws_cdk_lib_1.Lazy.string({
                produce: () => {
                    if (!cfnUserPool.policies) {
                        return '';
                    }
                    const policy = cfnUserPool.policies
                        .passwordPolicy;
                    const requirements = [];
                    policy.requireNumbers && requirements.push('REQUIRES_NUMBERS');
                    policy.requireLowercase && requirements.push('REQUIRES_LOWERCASE');
                    policy.requireUppercase && requirements.push('REQUIRES_UPPERCASE');
                    policy.requireSymbols && requirements.push('REQUIRES_SYMBOLS');
                    return JSON.stringify(requirements);
                },
            });
            // extract the MFA configuration setting from the UserPool resource
            output.mfaConfiguration = aws_cdk_lib_1.Lazy.string({
                produce: () => {
                    var _a;
                    return (_a = cfnUserPool.mfaConfiguration) !== null && _a !== void 0 ? _a : 'OFF';
                },
            });
            // extract the MFA types from the UserPool resource
            output.mfaTypes = aws_cdk_lib_1.Lazy.string({
                produce: () => {
                    var _a;
                    const mfaTypes = [];
                    ((_a = cfnUserPool.enabledMfas) !== null && _a !== void 0 ? _a : []).forEach((type) => {
                        if (type === 'SMS_MFA') {
                            mfaTypes.push('SMS');
                        }
                        if (type === 'SOFTWARE_TOKEN_MFA') {
                            mfaTypes.push('TOTP');
                        }
                    });
                    return JSON.stringify(mfaTypes);
                },
            });
            // extract social providers from UserPool resource
            output.socialProviders = aws_cdk_lib_1.Lazy.string({
                produce: () => {
                    const outputProviders = [];
                    const userPoolProviders = this.resources.userPool.identityProviders;
                    if (!userPoolProviders || userPoolProviders.length === 0) {
                        return '';
                    }
                    for (const provider of userPoolProviders) {
                        const providerResource = provider.node.findChild('Resource');
                        if (!(providerResource instanceof aws_cognito_1.CfnUserPoolIdentityProvider)) {
                            throw Error('Could not find the CfnUserPoolIdentityProvider resource in the stack.');
                        }
                        const providerType = providerResource.providerType;
                        const providerName = providerResource.providerName;
                        if (providerType === 'Google') {
                            outputProviders.push('GOOGLE');
                        }
                        if (providerType === 'Facebook') {
                            outputProviders.push('FACEBOOK');
                        }
                        if (providerType === 'SignInWithApple') {
                            outputProviders.push('SIGN_IN_WITH_APPLE');
                        }
                        if (providerType === 'LoginWithAmazon') {
                            outputProviders.push('LOGIN_WITH_AMAZON');
                        }
                        if (providerType === 'OIDC') {
                            outputProviders.push(providerName);
                        }
                        if (providerType === 'SAML') {
                            outputProviders.push(providerName);
                        }
                    }
                    return JSON.stringify(outputProviders);
                },
            });
            output.oauthCognitoDomain = aws_cdk_lib_1.Lazy.string({
                produce: () => {
                    const userPoolDomain = this.resources.userPool.node.tryFindChild(`${this.name}UserPoolDomain`);
                    if (!userPoolDomain) {
                        return '';
                    }
                    if (!(userPoolDomain instanceof aws_cognito_1.UserPoolDomain)) {
                        throw Error('Could not find UserPoolDomain resource in the stack.');
                    }
                    return `${userPoolDomain.domainName}.auth.${aws_cdk_lib_1.Stack.of(this).region}.amazoncognito.com`;
                },
            });
            output.oauthScope = aws_cdk_lib_1.Lazy.string({
                produce: () => {
                    var _a;
                    return JSON.stringify((_a = cfnUserPoolClient.allowedOAuthScopes) !== null && _a !== void 0 ? _a : []);
                },
            });
            output.oauthRedirectSignIn = aws_cdk_lib_1.Lazy.string({
                produce: () => {
                    return cfnUserPoolClient.callbackUrLs
                        ? cfnUserPoolClient.callbackUrLs.join(',')
                        : '';
                },
            });
            output.oauthRedirectSignOut = aws_cdk_lib_1.Lazy.string({
                produce: () => {
                    return cfnUserPoolClient.logoutUrLs
                        ? cfnUserPoolClient.logoutUrLs.join(',')
                        : '';
                },
            });
            output.oauthResponseType = aws_cdk_lib_1.Lazy.string({
                produce: () => {
                    return cfnUserPoolClient.allowedOAuthFlows
                        ? cfnUserPoolClient.allowedOAuthFlows.join(',')
                        : '';
                },
            });
            output.oauthClientId = aws_cdk_lib_1.Lazy.string({
                produce: () => {
                    return cfnUserPoolClient.ref;
                },
            });
            // user group precedence can be overwritten, so they are exposed via cdk LAZY
            output.groups = aws_cdk_lib_1.Lazy.string({
                produce: () => {
                    const groupsArray = [];
                    Object.keys(this.resources.groups).forEach((groupName) => {
                        const precedence = this.resources.groups[groupName].cfnUserGroup.precedence;
                        groupsArray.push({
                            [groupName]: {
                                precedence,
                            },
                        });
                    }, {});
                    return JSON.stringify(groupsArray);
                },
            });
            outputStorageStrategy.addBackendOutputEntry(backend_output_schemas_1.authOutputKey, {
                version: '1',
                payload: output,
            });
        };
        this.name = (_a = props.name) !== null && _a !== void 0 ? _a : '';
        this.domainPrefix = (_b = props.loginWith.externalProviders) === null || _b === void 0 ? void 0 : _b.domainPrefix;
        // UserPool
        this.computedUserPoolProps = this.getUserPoolProps(props);
        this.userPool = new aws_cdk_lib_1.aws_cognito.UserPool(this, `${this.name}UserPool`, this.computedUserPoolProps);
        // UserPool - External Providers (Oauth, SAML, OIDC) and User Pool Domain
        this.providerSetupResult = this.setupExternalProviders(this.userPool, props.loginWith);
        // UserPool Client
        const userPoolClient = new aws_cdk_lib_1.aws_cognito.UserPoolClient(this, `${this.name}UserPoolAppClient`, {
            userPool: this.userPool,
            authFlows: defaults_js_1.DEFAULTS.AUTH_FLOWS,
            preventUserExistenceErrors: defaults_js_1.DEFAULTS.PREVENT_USER_EXISTENCE_ERRORS,
            oAuth: this.providerSetupResult.oAuthSettings,
        });
        // Identity Pool
        const { identityPool, identityPoolRoleAttachment, roles: { auth, unAuth }, } = this.setupIdentityPool(this.userPool, userPoolClient, this.providerSetupResult);
        // Setup UserPool groups
        this.setupUserPoolGroups(props.groups, identityPool);
        const cfnUserPool = this.userPool.node.findChild('Resource');
        if (!(cfnUserPool instanceof aws_cognito_1.CfnUserPool)) {
            throw Error('Could not find CfnUserPool resource in stack.');
        }
        const cfnUserPoolClient = userPoolClient.node.findChild('Resource');
        if (!(cfnUserPoolClient instanceof aws_cognito_1.CfnUserPoolClient)) {
            throw Error('Could not find CfnUserPoolClient resource in stack.');
        }
        // expose resources
        this.resources = {
            userPool: this.userPool,
            userPoolClient,
            authenticatedUserIamRole: auth,
            unauthenticatedUserIamRole: unAuth,
            cfnResources: {
                cfnUserPool,
                cfnUserPoolClient,
                cfnIdentityPool: identityPool,
                cfnIdentityPoolRoleAttachment: identityPoolRoleAttachment,
            },
            groups: this.groups,
        };
        this.storeOutput(props.outputStorageStrategy);
        new backend_output_storage_1.AttributionMetadataStorage().storeAttributionMetadata(aws_cdk_lib_1.Stack.of(this), authStackType, path.resolve(__dirname, '..', 'package.json'));
    }
    /**
     * Parses the user invitation settings and inserts codes/usernames where necessary.
     * @param settings the invitation settings
     * @returns cognito.UserInvitationConfig | undefined
     */
    getUserInvitationSettings(settings) {
        if (!settings) {
            return undefined;
        }
        return {
            emailSubject: settings.emailSubject,
            emailBody: settings.emailBody
                ? settings.emailBody(() => INVITATION_PLACEHOLDERS.USERNAME, () => INVITATION_PLACEHOLDERS.CODE)
                : undefined,
            smsMessage: settings.smsMessage
                ? settings.smsMessage(() => INVITATION_PLACEHOLDERS.USERNAME, () => INVITATION_PLACEHOLDERS.CODE)
                : undefined,
        };
    }
    /**
     * Verify the email body depending on if 'CODE' or 'LINK' style is used.
     * This ensures that the template contains the necessary placeholders for Cognito to insert verification codes or links.
     * @param emailSettings the provided email settings
     * @returns emailBody
     */
    verifyEmailBody(emailSettings) {
        let emailBody;
        if (emailSettings.verificationEmailBody &&
            emailSettings.verificationEmailStyle !== 'LINK') {
            emailBody = emailSettings.verificationEmailBody(() => VERIFICATION_EMAIL_PLACEHOLDERS.CODE);
            if (!emailBody.includes(VERIFICATION_EMAIL_PLACEHOLDERS.CODE)) {
                throw Error("Invalid email settings. Property 'verificationEmailBody' must utilize the 'code' parameter at least once as a placeholder for the verification code.");
            }
        }
        if (emailSettings.verificationEmailBody &&
            emailSettings.verificationEmailStyle === 'LINK') {
            let linkText = '';
            emailBody = emailSettings.verificationEmailBody((text) => {
                linkText = text
                    ? `{##${text}##}`
                    : VERIFICATION_EMAIL_PLACEHOLDERS.LINK;
                return linkText;
            });
            if (linkText === '' || !emailBody.includes(linkText)) {
                throw Error("Invalid email settings. Property 'verificationEmailBody' must utilize the 'link' parameter at least once as a placeholder for the verification link.");
            }
        }
        return emailBody;
    }
}
exports.AmplifyAuth = AmplifyAuth;
//# sourceMappingURL=data:application/json;base64,
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getBootstrapStackInfo = exports.determineAllowCrossAccountAssetPublishing = void 0;
const logging_1 = require("../../logging");
async function determineAllowCrossAccountAssetPublishing(sdk, customStackName) {
    try {
        const stackName = customStackName || 'CDKToolkit';
        const stackInfo = await getBootstrapStackInfo(sdk, stackName);
        if (!stackInfo.hasStagingBucket) {
            // indicates an intentional cross account setup
            return true;
        }
        if (stackInfo.bootstrapVersion >= 21) {
            // bootstrap stack version 21 contains a fix that will prevent cross
            // account publishing on the IAM level
            // https://github.com/aws/aws-cdk/pull/30823
            return true;
        }
        // other scenarios are highly irregular and potentially dangerous so we prevent it by
        // instructing cdk-assets to detect foreign bucket ownership and reject.
        return false;
    }
    catch (e) {
        (0, logging_1.debug)(`Error determining cross account asset publishing: ${e}`);
        (0, logging_1.debug)('Defaulting to disallowing cross account asset publishing');
        return false;
    }
}
exports.determineAllowCrossAccountAssetPublishing = determineAllowCrossAccountAssetPublishing;
async function getBootstrapStackInfo(sdk, stackName) {
    try {
        const cfn = sdk.cloudFormation();
        const stackResponse = await cfn.describeStacks({ StackName: stackName }).promise();
        if (!stackResponse.Stacks || stackResponse.Stacks.length === 0) {
            throw new Error(`Toolkit stack ${stackName} not found`);
        }
        const stack = stackResponse.Stacks[0];
        const versionOutput = stack.Outputs?.find(output => output.OutputKey === 'BootstrapVersion');
        if (!versionOutput?.OutputValue) {
            throw new Error(`Unable to find BootstrapVersion output in the toolkit stack ${stackName}`);
        }
        const bootstrapVersion = parseInt(versionOutput.OutputValue);
        if (isNaN(bootstrapVersion)) {
            throw new Error(`Invalid BootstrapVersion value: ${versionOutput.OutputValue}`);
        }
        // try to get bucketname from the logical resource id
        let bucketName;
        const resourcesResponse = await cfn.describeStackResources({ StackName: stackName }).promise();
        const bucketResource = resourcesResponse.StackResources?.find(resource => resource.ResourceType === 'AWS::S3::Bucket');
        bucketName = bucketResource?.PhysicalResourceId;
        let hasStagingBucket = !!bucketName;
        return {
            hasStagingBucket,
            bootstrapVersion,
        };
    }
    catch (e) {
        throw new Error(`Error retrieving toolkit stack info: ${e}`);
    }
}
exports.getBootstrapStackInfo = getBootstrapStackInfo;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hlY2tzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiY2hlY2tzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDJDQUFzQztBQUcvQixLQUFLLFVBQVUseUNBQXlDLENBQUMsR0FBUyxFQUFFLGVBQXdCO0lBQ2pHLElBQUksQ0FBQztRQUNILE1BQU0sU0FBUyxHQUFHLGVBQWUsSUFBSSxZQUFZLENBQUM7UUFDbEQsTUFBTSxTQUFTLEdBQUcsTUFBTSxxQkFBcUIsQ0FBQyxHQUFHLEVBQUUsU0FBUyxDQUFDLENBQUM7UUFFOUQsSUFBSSxDQUFDLFNBQVMsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO1lBQ2hDLCtDQUErQztZQUMvQyxPQUFPLElBQUksQ0FBQztRQUNkLENBQUM7UUFFRCxJQUFJLFNBQVMsQ0FBQyxnQkFBZ0IsSUFBSSxFQUFFLEVBQUUsQ0FBQztZQUNyQyxvRUFBb0U7WUFDcEUsc0NBQXNDO1lBQ3RDLDRDQUE0QztZQUM1QyxPQUFPLElBQUksQ0FBQztRQUNkLENBQUM7UUFFRCxxRkFBcUY7UUFDckYsd0VBQXdFO1FBQ3hFLE9BQU8sS0FBSyxDQUFDO0lBQ2YsQ0FBQztJQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUM7UUFDWCxJQUFBLGVBQUssRUFBQyxxREFBcUQsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUNoRSxJQUFBLGVBQUssRUFBQywwREFBMEQsQ0FBQyxDQUFDO1FBQ2xFLE9BQU8sS0FBSyxDQUFDO0lBQ2YsQ0FBQztBQUNILENBQUM7QUF6QkQsOEZBeUJDO0FBT00sS0FBSyxVQUFVLHFCQUFxQixDQUFDLEdBQVMsRUFBRSxTQUFpQjtJQUN0RSxJQUFJLENBQUM7UUFDSCxNQUFNLEdBQUcsR0FBRyxHQUFHLENBQUMsY0FBYyxFQUFFLENBQUM7UUFDakMsTUFBTSxhQUFhLEdBQUcsTUFBTSxHQUFHLENBQUMsY0FBYyxDQUFDLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBRSxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUM7UUFFbkYsSUFBSSxDQUFDLGFBQWEsQ0FBQyxNQUFNLElBQUksYUFBYSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFLENBQUM7WUFDL0QsTUFBTSxJQUFJLEtBQUssQ0FBQyxpQkFBaUIsU0FBUyxZQUFZLENBQUMsQ0FBQztRQUMxRCxDQUFDO1FBRUQsTUFBTSxLQUFLLEdBQUcsYUFBYSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN0QyxNQUFNLGFBQWEsR0FBRyxLQUFLLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxTQUFTLEtBQUssa0JBQWtCLENBQUMsQ0FBQztRQUU3RixJQUFJLENBQUMsYUFBYSxFQUFFLFdBQVcsRUFBRSxDQUFDO1lBQ2hDLE1BQU0sSUFBSSxLQUFLLENBQUMsK0RBQStELFNBQVMsRUFBRSxDQUFDLENBQUM7UUFDOUYsQ0FBQztRQUVELE1BQU0sZ0JBQWdCLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUM3RCxJQUFJLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxFQUFFLENBQUM7WUFDNUIsTUFBTSxJQUFJLEtBQUssQ0FBQyxtQ0FBbUMsYUFBYSxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUM7UUFDbEYsQ0FBQztRQUVELHFEQUFxRDtRQUNyRCxJQUFJLFVBQThCLENBQUM7UUFDbkMsTUFBTSxpQkFBaUIsR0FBRyxNQUFNLEdBQUcsQ0FBQyxzQkFBc0IsQ0FBQyxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUUsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBQy9GLE1BQU0sY0FBYyxHQUFHLGlCQUFpQixDQUFDLGNBQWMsRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FDdkUsUUFBUSxDQUFDLFlBQVksS0FBSyxpQkFBaUIsQ0FDNUMsQ0FBQztRQUNGLFVBQVUsR0FBRyxjQUFjLEVBQUUsa0JBQWtCLENBQUM7UUFFaEQsSUFBSSxnQkFBZ0IsR0FBRyxDQUFDLENBQUMsVUFBVSxDQUFDO1FBRXBDLE9BQU87WUFDTCxnQkFBZ0I7WUFDaEIsZ0JBQWdCO1NBQ2pCLENBQUM7SUFDSixDQUFDO0lBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQztRQUNYLE1BQU0sSUFBSSxLQUFLLENBQUMsd0NBQXdDLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDL0QsQ0FBQztBQUNILENBQUM7QUF0Q0Qsc0RBc0NDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZGVidWcgfSBmcm9tICcuLi8uLi9sb2dnaW5nJztcbmltcG9ydCB7IElTREsgfSBmcm9tICcuLi9hd3MtYXV0aC9zZGsnO1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZGV0ZXJtaW5lQWxsb3dDcm9zc0FjY291bnRBc3NldFB1Ymxpc2hpbmcoc2RrOiBJU0RLLCBjdXN0b21TdGFja05hbWU/OiBzdHJpbmcpOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgdHJ5IHtcbiAgICBjb25zdCBzdGFja05hbWUgPSBjdXN0b21TdGFja05hbWUgfHwgJ0NES1Rvb2xraXQnO1xuICAgIGNvbnN0IHN0YWNrSW5mbyA9IGF3YWl0IGdldEJvb3RzdHJhcFN0YWNrSW5mbyhzZGssIHN0YWNrTmFtZSk7XG5cbiAgICBpZiAoIXN0YWNrSW5mby5oYXNTdGFnaW5nQnVja2V0KSB7XG4gICAgICAvLyBpbmRpY2F0ZXMgYW4gaW50ZW50aW9uYWwgY3Jvc3MgYWNjb3VudCBzZXR1cFxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgaWYgKHN0YWNrSW5mby5ib290c3RyYXBWZXJzaW9uID49IDIxKSB7XG4gICAgICAvLyBib290c3RyYXAgc3RhY2sgdmVyc2lvbiAyMSBjb250YWlucyBhIGZpeCB0aGF0IHdpbGwgcHJldmVudCBjcm9zc1xuICAgICAgLy8gYWNjb3VudCBwdWJsaXNoaW5nIG9uIHRoZSBJQU0gbGV2ZWxcbiAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9hd3MvYXdzLWNkay9wdWxsLzMwODIzXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICAvLyBvdGhlciBzY2VuYXJpb3MgYXJlIGhpZ2hseSBpcnJlZ3VsYXIgYW5kIHBvdGVudGlhbGx5IGRhbmdlcm91cyBzbyB3ZSBwcmV2ZW50IGl0IGJ5XG4gICAgLy8gaW5zdHJ1Y3RpbmcgY2RrLWFzc2V0cyB0byBkZXRlY3QgZm9yZWlnbiBidWNrZXQgb3duZXJzaGlwIGFuZCByZWplY3QuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9IGNhdGNoIChlKSB7XG4gICAgZGVidWcoYEVycm9yIGRldGVybWluaW5nIGNyb3NzIGFjY291bnQgYXNzZXQgcHVibGlzaGluZzogJHtlfWApO1xuICAgIGRlYnVnKCdEZWZhdWx0aW5nIHRvIGRpc2FsbG93aW5nIGNyb3NzIGFjY291bnQgYXNzZXQgcHVibGlzaGluZycpO1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuXG5pbnRlcmZhY2UgQm9vdHN0cmFwU3RhY2tJbmZvIHtcbiAgaGFzU3RhZ2luZ0J1Y2tldDogYm9vbGVhbjtcbiAgYm9vdHN0cmFwVmVyc2lvbjogbnVtYmVyO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0Qm9vdHN0cmFwU3RhY2tJbmZvKHNkazogSVNESywgc3RhY2tOYW1lOiBzdHJpbmcpOiBQcm9taXNlPEJvb3RzdHJhcFN0YWNrSW5mbz4ge1xuICB0cnkge1xuICAgIGNvbnN0IGNmbiA9IHNkay5jbG91ZEZvcm1hdGlvbigpO1xuICAgIGNvbnN0IHN0YWNrUmVzcG9uc2UgPSBhd2FpdCBjZm4uZGVzY3JpYmVTdGFja3MoeyBTdGFja05hbWU6IHN0YWNrTmFtZSB9KS5wcm9taXNlKCk7XG5cbiAgICBpZiAoIXN0YWNrUmVzcG9uc2UuU3RhY2tzIHx8IHN0YWNrUmVzcG9uc2UuU3RhY2tzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBUb29sa2l0IHN0YWNrICR7c3RhY2tOYW1lfSBub3QgZm91bmRgKTtcbiAgICB9XG5cbiAgICBjb25zdCBzdGFjayA9IHN0YWNrUmVzcG9uc2UuU3RhY2tzWzBdO1xuICAgIGNvbnN0IHZlcnNpb25PdXRwdXQgPSBzdGFjay5PdXRwdXRzPy5maW5kKG91dHB1dCA9PiBvdXRwdXQuT3V0cHV0S2V5ID09PSAnQm9vdHN0cmFwVmVyc2lvbicpO1xuXG4gICAgaWYgKCF2ZXJzaW9uT3V0cHV0Py5PdXRwdXRWYWx1ZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBVbmFibGUgdG8gZmluZCBCb290c3RyYXBWZXJzaW9uIG91dHB1dCBpbiB0aGUgdG9vbGtpdCBzdGFjayAke3N0YWNrTmFtZX1gKTtcbiAgICB9XG5cbiAgICBjb25zdCBib290c3RyYXBWZXJzaW9uID0gcGFyc2VJbnQodmVyc2lvbk91dHB1dC5PdXRwdXRWYWx1ZSk7XG4gICAgaWYgKGlzTmFOKGJvb3RzdHJhcFZlcnNpb24pKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgQm9vdHN0cmFwVmVyc2lvbiB2YWx1ZTogJHt2ZXJzaW9uT3V0cHV0Lk91dHB1dFZhbHVlfWApO1xuICAgIH1cblxuICAgIC8vIHRyeSB0byBnZXQgYnVja2V0bmFtZSBmcm9tIHRoZSBsb2dpY2FsIHJlc291cmNlIGlkXG4gICAgbGV0IGJ1Y2tldE5hbWU6IHN0cmluZyB8IHVuZGVmaW5lZDtcbiAgICBjb25zdCByZXNvdXJjZXNSZXNwb25zZSA9IGF3YWl0IGNmbi5kZXNjcmliZVN0YWNrUmVzb3VyY2VzKHsgU3RhY2tOYW1lOiBzdGFja05hbWUgfSkucHJvbWlzZSgpO1xuICAgIGNvbnN0IGJ1Y2tldFJlc291cmNlID0gcmVzb3VyY2VzUmVzcG9uc2UuU3RhY2tSZXNvdXJjZXM/LmZpbmQocmVzb3VyY2UgPT5cbiAgICAgIHJlc291cmNlLlJlc291cmNlVHlwZSA9PT0gJ0FXUzo6UzM6OkJ1Y2tldCcsXG4gICAgKTtcbiAgICBidWNrZXROYW1lID0gYnVja2V0UmVzb3VyY2U/LlBoeXNpY2FsUmVzb3VyY2VJZDtcblxuICAgIGxldCBoYXNTdGFnaW5nQnVja2V0ID0gISFidWNrZXROYW1lO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIGhhc1N0YWdpbmdCdWNrZXQsXG4gICAgICBib290c3RyYXBWZXJzaW9uLFxuICAgIH07XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYEVycm9yIHJldHJpZXZpbmcgdG9vbGtpdCBzdGFjayBpbmZvOiAke2V9YCk7XG4gIH1cbn0iXX0=
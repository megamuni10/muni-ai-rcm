"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GarbageCollector = exports.S3Asset = void 0;
const chalk = require("chalk");
const promptly = require("promptly");
const logging_1 = require("../../logging");
const aws_auth_1 = require("../aws-auth");
const toolkit_info_1 = require("../toolkit-info");
const progress_printer_1 = require("./progress-printer");
const stack_refresh_1 = require("./stack-refresh");
// Must use a require() otherwise esbuild complains
// eslint-disable-next-line @typescript-eslint/no-require-imports
const pLimit = require('p-limit');
const ISOLATED_TAG = 'aws-cdk:isolated';
const P_LIMIT = 50;
const DAY = 24 * 60 * 60 * 1000; // Number of milliseconds in a day
class S3Asset {
    constructor(bucket, key, size) {
        this.bucket = bucket;
        this.key = key;
        this.size = size;
        this.cached_tags = undefined;
    }
    fileName() {
        return this.key.split('.')[0];
    }
    async allTags(s3) {
        if (this.cached_tags) {
            return this.cached_tags;
        }
        const response = await s3.getObjectTagging({ Bucket: this.bucket, Key: this.key }).promise();
        this.cached_tags = response.TagSet;
        return this.cached_tags;
    }
    getTag(tag) {
        if (!this.cached_tags) {
            throw new Error('Cannot call getTag before allTags');
        }
        return this.cached_tags.find(t => t.Key === tag)?.Value;
    }
    hasTag(tag) {
        if (!this.cached_tags) {
            throw new Error('Cannot call hasTag before allTags');
        }
        return this.cached_tags.some(t => t.Key === tag);
    }
    hasIsolatedTag() {
        return this.hasTag(ISOLATED_TAG);
    }
    isolatedTagBefore(date) {
        const tagValue = this.getTag(ISOLATED_TAG);
        if (!tagValue || tagValue == '') {
            return false;
        }
        return new Date(tagValue) < date;
    }
}
exports.S3Asset = S3Asset;
/**
 * A class to facilitate Garbage Collection of S3 and ECR assets
 */
class GarbageCollector {
    constructor(props) {
        this.props = props;
        this.garbageCollectS3Assets = ['s3', 'all'].includes(props.type);
        this.garbageCollectEcrAssets = ['ecr', 'all'].includes(props.type);
        (0, logging_1.debug)(`${this.garbageCollectS3Assets} ${this.garbageCollectEcrAssets}`);
        this.permissionToDelete = ['delete-tagged', 'full'].includes(props.action);
        this.permissionToTag = ['tag', 'full'].includes(props.action);
        this.maxWaitTime = props.maxWaitTime ?? 60000;
        this.confirm = props.confirm ?? true;
        this.bootstrapStackName = props.bootstrapStackName ?? toolkit_info_1.DEFAULT_TOOLKIT_STACK_NAME;
        // TODO: ECR garbage collection
        if (this.garbageCollectEcrAssets) {
            throw new Error('ECR garbage collection is not yet supported');
        }
    }
    /**
     * Perform garbage collection on the resolved environment.
     */
    async garbageCollect() {
        // SDKs
        const sdk = (await this.props.sdkProvider.forEnvironment(this.props.resolvedEnvironment, aws_auth_1.Mode.ForWriting)).sdk;
        const cfn = sdk.cloudFormation();
        const s3 = sdk.s3();
        const qualifier = await this.bootstrapQualifier(sdk, this.bootstrapStackName);
        const activeAssets = new stack_refresh_1.ActiveAssetCache();
        // Grab stack templates first
        await (0, stack_refresh_1.refreshStacks)(cfn, activeAssets, this.maxWaitTime, qualifier);
        // Start the background refresh
        const backgroundStackRefresh = new stack_refresh_1.BackgroundStackRefresh({
            cfn,
            activeAssets,
            qualifier,
            maxWaitTime: this.maxWaitTime,
        });
        backgroundStackRefresh.start();
        const bucket = await this.bootstrapBucketName(sdk, this.bootstrapStackName);
        const numObjects = await this.numObjectsInBucket(s3, bucket);
        const printer = new progress_printer_1.ProgressPrinter(numObjects, 1000);
        (0, logging_1.debug)(`Found bootstrap bucket ${bucket}`);
        try {
            const batches = 1;
            const batchSize = 1000;
            const currentTime = Date.now();
            const graceDays = this.props.rollbackBufferDays;
            (0, logging_1.debug)(`Parsing through ${numObjects} objects in batches`);
            // Process objects in batches of 1000
            // This is the batch limit of s3.DeleteObject and we intend to optimize for the "worst case" scenario
            // where gc is run for the first time on a long-standing bucket where ~100% of objects are isolated.
            for await (const batch of this.readBucketInBatches(s3, bucket, batchSize, currentTime)) {
                await backgroundStackRefresh.noOlderThan(600000); // 10 mins
                (0, logging_1.print)(chalk.green(`Processing batch ${batches} of ${Math.floor(numObjects / batchSize) + 1}`));
                printer.start();
                const { included: isolated, excluded: notIsolated } = partition(batch, asset => !activeAssets.contains(asset.fileName()));
                (0, logging_1.debug)(`${isolated.length} isolated assets`);
                (0, logging_1.debug)(`${notIsolated.length} not isolated assets`);
                (0, logging_1.debug)(`${batch.length} objects total`);
                let deletables = isolated;
                let taggables = [];
                let untaggables = [];
                if (graceDays > 0) {
                    (0, logging_1.debug)('Filtering out assets that are not old enough to delete');
                    await this.parallelReadAllTags(s3, batch);
                    // We delete objects that are not referenced in ActiveAssets and have the Isolated Tag with a date
                    // earlier than the current time - grace period.
                    deletables = isolated.filter(obj => obj.isolatedTagBefore(new Date(currentTime - (graceDays * DAY))));
                    // We tag objects that are not referenced in ActiveAssets and do not have the Isolated Tag.
                    taggables = isolated.filter(obj => !obj.hasIsolatedTag());
                    // We untag objects that are referenced in ActiveAssets and currently have the Isolated Tag.
                    untaggables = notIsolated.filter(obj => obj.hasIsolatedTag());
                }
                (0, logging_1.debug)(`${deletables.length} deletable assets`);
                (0, logging_1.debug)(`${taggables.length} taggable assets`);
                (0, logging_1.debug)(`${untaggables.length} assets to untag`);
                if (this.permissionToDelete && deletables.length > 0) {
                    if (this.confirm) {
                        const message = [
                            `Found ${deletables.length} objects to delete based off of the following criteria:`,
                            `- objects have been isolated for > ${this.props.rollbackBufferDays} days`,
                            `- objects were created > ${this.props.createdBufferDays} days ago`,
                            '',
                            'Delete this batch (yes/no/delete-all)?',
                        ].join('\n');
                        printer.pause();
                        const response = await promptly.prompt(message, { trim: true });
                        // Anything other than yes/y/delete-all is treated as no
                        if (!response || !['yes', 'y', 'delete-all'].includes(response.toLowerCase())) {
                            throw new Error('Deletion aborted by user');
                        }
                        else if (response.toLowerCase() == 'delete-all') {
                            this.confirm = false;
                        }
                    }
                    printer.resume();
                    await this.parallelDelete(s3, bucket, deletables, printer);
                }
                if (this.permissionToTag && taggables.length > 0) {
                    await this.parallelTag(s3, bucket, taggables, currentTime, printer);
                }
                if (this.permissionToTag && untaggables.length > 0) {
                    await this.parallelUntag(s3, bucket, untaggables);
                }
                printer.reportScannedObjects(batch.length);
            }
        }
        catch (err) {
            throw new Error(err);
        }
        finally {
            backgroundStackRefresh.stop();
            printer.stop();
        }
    }
    async parallelReadAllTags(s3, objects) {
        const limit = pLimit(P_LIMIT);
        for (const obj of objects) {
            await limit(() => obj.allTags(s3));
        }
    }
    /**
     * Untag assets that were previously tagged, but now currently referenced.
     * Since this is treated as an implementation detail, we do not print the results in the printer.
     */
    async parallelUntag(s3, bucket, untaggables) {
        const limit = pLimit(P_LIMIT);
        for (const obj of untaggables) {
            const tags = await obj.allTags(s3);
            const updatedTags = tags.filter(tag => tag.Key !== ISOLATED_TAG);
            await limit(() => s3.deleteObjectTagging({
                Bucket: bucket,
                Key: obj.key,
            }).promise());
            await limit(() => s3.putObjectTagging({
                Bucket: bucket,
                Key: obj.key,
                Tagging: {
                    TagSet: updatedTags,
                },
            }).promise());
        }
        (0, logging_1.debug)(`Untagged ${untaggables.length} assets`);
    }
    /**
     * Tag objects in parallel using p-limit. The putObjectTagging API does not
     * support batch tagging so we must handle the parallelism client-side.
     */
    async parallelTag(s3, bucket, taggables, date, printer) {
        const limit = pLimit(P_LIMIT);
        for (const obj of taggables) {
            await limit(() => s3.putObjectTagging({
                Bucket: bucket,
                Key: obj.key,
                Tagging: {
                    TagSet: [
                        {
                            Key: ISOLATED_TAG,
                            Value: String(date),
                        },
                    ],
                },
            }).promise());
        }
        printer.reportTaggedObjects(taggables);
        (0, logging_1.debug)(`Tagged ${taggables.length} assets`);
    }
    /**
     * Delete objects in parallel. The deleteObjects API supports batches of 1000.
     */
    async parallelDelete(s3, bucket, deletables, printer) {
        const batchSize = 1000;
        const objectsToDelete = deletables.map(asset => ({
            Key: asset.key,
        }));
        try {
            const batches = [];
            for (let i = 0; i < objectsToDelete.length; i += batchSize) {
                batches.push(objectsToDelete.slice(i, i + batchSize));
            }
            // Delete objects in batches
            for (const batch of batches) {
                await s3.deleteObjects({
                    Bucket: bucket,
                    Delete: {
                        Objects: batch,
                        Quiet: true,
                    },
                }).promise();
                const deletedCount = batch.length;
                (0, logging_1.debug)(`Deleted ${deletedCount} assets`);
                printer.reportDeletedObjects(deletables.slice(0, deletedCount));
            }
        }
        catch (err) {
            (0, logging_1.print)(chalk.red(`Error deleting objects: ${err}`));
        }
    }
    async bootstrapBucketName(sdk, bootstrapStackName) {
        const info = await toolkit_info_1.ToolkitInfo.lookup(this.props.resolvedEnvironment, sdk, bootstrapStackName);
        return info.bucketName;
    }
    async bootstrapQualifier(sdk, bootstrapStackName) {
        const info = await toolkit_info_1.ToolkitInfo.lookup(this.props.resolvedEnvironment, sdk, bootstrapStackName);
        return info.bootstrapStack.parameters.Qualifier;
    }
    async numObjectsInBucket(s3, bucket) {
        let totalCount = 0;
        let continuationToken;
        do {
            const response = await s3.listObjectsV2({
                Bucket: bucket,
                ContinuationToken: continuationToken,
            }).promise();
            totalCount += response.KeyCount ?? 0;
            continuationToken = response.NextContinuationToken;
        } while (continuationToken);
        return totalCount;
    }
    /**
     * Generator function that reads objects from the S3 Bucket in batches.
     */
    async *readBucketInBatches(s3, bucket, batchSize = 1000, currentTime) {
        let continuationToken;
        do {
            const batch = [];
            while (batch.length < batchSize) {
                const response = await s3.listObjectsV2({
                    Bucket: bucket,
                    ContinuationToken: continuationToken,
                }).promise();
                response.Contents?.forEach((obj) => {
                    const key = obj.Key ?? '';
                    const size = obj.Size ?? 0;
                    const lastModified = obj.LastModified ?? new Date(currentTime);
                    // Store the object if it has a Key and
                    // if it has not been modified since today - createdBufferDays
                    if (key && lastModified < new Date(currentTime - (this.props.createdBufferDays * DAY))) {
                        batch.push(new S3Asset(bucket, key, size));
                    }
                });
                continuationToken = response.NextContinuationToken;
                if (!continuationToken)
                    break; // No more objects to fetch
            }
            if (batch.length > 0) {
                yield batch;
            }
        } while (continuationToken);
    }
}
exports.GarbageCollector = GarbageCollector;
function partition(xs, pred) {
    const result = {
        included: [],
        excluded: [],
    };
    for (const x of xs) {
        if (pred(x)) {
            result.included.push(x);
        }
        else {
            result.excluded.push(x);
        }
    }
    return result;
}
//# sourceMappingURL=data:application/json;base64,